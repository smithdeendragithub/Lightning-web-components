<apex:component controller="AddressSelectorController" allowDML="true">
    <apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" />
    <apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.13/jquery-ui.min.js" />
    <apex:stylesheet value="{!URLFOR($Resource.jquery_ui_1_8_16_custom, 'css/smoothness/jquery-ui-1.8.16.custom.css')}" />
    <apex:includeScript value="{!URLFOR($Resource.DynamicTableZip,'DynamicTable.js')}"/>
    <apex:dynamicComponent componentValue="{!sharedDynamicComponents}"/>
    
    <apex:attribute name="accID" description="Account ID designating service location mode" assignTo="{!accountID}" type="String" required="false"/>
    <apex:attribute name="autoBindSearchBox" description="Google search box should bind on page load else on text box click" type="Boolean" required="true"/>
    <apex:attribute name="saveCallbackFunction" description="JS function to call back to upon save (success or not)" assignTo="{!jsSaveCallback}" type="String" required="false"/>
    <apex:attribute name="validateCallbackFunction" description="JS function to call back to upon building selected" type="String" required="false"/>
    <apex:attribute name="validateMode" description="Save must be done with function directly, validate uses room/suite" type="Boolean" required="false"/>
    <apex:attribute name="allowNew" description="Give the user the option to create new" type="Boolean" required="false" default="true" />
    
    <c:AddressParser addressGeocodedFunction="addressSelector_addressGeocoded"/>
    <c:ModalWaitDialog />
    <script type="text/javascript">
        var addressSelector_infoWindows = new Array();
        var addressSelector_map = null;
        var addressSelector_marker = null;
        var addressSelector_infowindow = null;
        var addressSelector_panorama = null;
        var addressSelector_locationMarker = null;
        var addressSelector_locationInfoWindow = null;
        var addressSelector_manualPin = false;
        var addressSelector_RoomSuite = '';
        function addressSelector_apiLoaded(searchBound){
            
            jQuery('#txtPhone').hide();
            jQuery('#txtSubpremise').hide();
            jQuery('#txtName').hide();
            jQuery('#addInfo').hide();
            jQuery("[id$='newBuildingSection']").hide();
            
            if(searchBound != true) bindGoogleAddressSearchBox(jQuery('input[id$=txtGoogleAddress]'));
            
            jQuery('#newBuildingSelect').unbind('click');
            jQuery('#newBuildingSelect').click(function(){
 
                var row = jQuery(this).closest("tr");
                var buildingID = row.find('[id$=buildingID').text();
                var buildingLat = null;
                var buildingLng = null;
                var buildingNetClass = null;
                var buildingName = null;

                buildingLat = row.find('[id$=buildingLat]').text();
                buildingLng = row.find('[id$=buildingLng]').text();
                
                buildingName = row.find('[id$=lblStreetNumber]').text() + ' ' + row.find('[id$=lblStreet]').text() + ' ' + row.find('[id$=lblCity]').text() + ', ' + row.find('[id$=lblState]').text() + ' ' + row.find('[id$=lblCountry]').text();

                addressSelector_createMarkerAndInfo(buildingLat,buildingLng,buildingNetClass,buildingName,buildingID,true);
                addressSelector_locationInfoWindow.open(addressSelector_map,addressSelector_locationMarker);
                addressSelector_notifyValidation(false);
            });
        }
        
        var addressSelector_setup;
        jQuery(document).ready(function() {
            if(addressSelector_setup == undefined){
                addressSelector_setup = true;
                jQuery("[id$='buildingInfo']").hide();
                jQuery("[id$='additionalInfo']").hide();
                jQuery("[id$='newBuildingSection']").hide();
                jQuery('#mapPanel').hide();
                
                if({!autoBindSearchBox}){
                    loadGoogleMapAPI(addressSelector_apiLoaded);
                }
                else{
                    asynch_bindGoogleAddressSearchBox(jQuery('input[id$=txtGoogleAddress]'));
                    jQuery("[id$='addressParserBinding']").bind('googleMapBound', addressSelector_apiLoaded(true));
                }
                
                jQuery(document).delegate(".clickToMap", "click", function SendToMap(){
                    jQuery('#txtGoogleAddress').val(jQuery(this).html());
                    jQuery('#btnMap').trigger('click');
                });
                
                //jQuery("[id$='existingBuildingSection']").children().first().css("background-color","#55AECA");
                //jQuery("[id$='newBuildingSection']").children().first().css("background-color","#55AECA");
            }
        });
        
        /*function addressSelector_bindGoogleTextBox(){
            var input = document.getElementById('txtGoogleAddress');
            if (input){
                var options = { componentRestrictions: { country: 'us'} };
                var autocomplete = new google.maps.places.Autocomplete(input, options);
                autocomplete.setTypes(['geocode']);
            }
        }*/
        
        function addressSelector_hideInput(){
            jQuery('#txtPhone').hide();
            jQuery('#txtSubpremise').hide();
            jQuery('#txtName').hide();
        }
        
        function addressSelector_clearResults(){
            jQuery('#newBuildingSelect').attr('checked',false);
            jQuery('#txtSubpremise').val('');
            jQuery('#txtStreetAddressInput').val('');
            jQuery('#lblStreetNumber').text('');
            jQuery('#lblStreet').text('');
            jQuery('#lblCity').text('');
            jQuery('#lblState').text('');
            jQuery('#lblPostalCode').text('');
            jQuery('#txtZip4Input').val('');
            jQuery('#lblCountry').text('');
            jQuery('#buildingLat').text('');
            jQuery('#buildingLng').text('');
            //MNK added
            jQuery('#lblCountry').text('');
        }
        
        function addressSelector_displayGoogleMap(){
            jQuery('#txtStreetAddressInput').hide();
            addressSelector_clearResults();
            var geocoder = new google.maps.Geocoder();
            var input = document.getElementById('txtGoogleAddress');
            if(input){
                var address = input.value;
                geocodeAddress(address, addressSelector_addressGeocoded);
            }
        }
        
        /*function addressSelector_showGoogleMap(){
            if(!jQuery('#map').is(":visible")){
                jQuery('#mapPanel').show();
                jQuery('#map').show();
                jQuery('#addInfo').show();
                
                jQuery("[id$='newBuildingSection']").show();
            }
        }*/
        
        function addressSelector_addressGeocoded(result){
            if(result.success){
                var myOptions;
                if('{!canManuallyCreateBuilding}' == 'true'){
                    myOptions = {
                        disableDefaultUI: true,
                        scrollwheel: true,
                        draggable: true,
                        panControl: true,
                        zoomControl: true,
                        disableDoubleClickZoom: true,
                        zoom: 16                    
                    };
                }
                else{
                    myOptions = {
                        disableDefaultUI: true,
                        scrollwheel: false,
                        draggable: true,
                        disableDoubleClickZoom: true,
                        zoom:16
                    };
                }
                
                var input = document.getElementById('txtGoogleAddress');
                
                jQuery('#txtPhone').show();
                jQuery('#txtSubpremise').show();
                jQuery('#txtName').show();
                
                //On load map is hidden until search
                if(jQuery('#mapError').is(":visible"))
                    jQuery('#mapError').hide();     
                if(!jQuery('#map').is(":visible")){
                    jQuery('#mapPanel').show();
                    jQuery('#map').show();
                    jQuery('#addInfo').show();
                    if('{!allowNew}' != 'false')
                        jQuery("[id$='newBuildingSection']").show();
                }
                
                addressSelector_map = new google.maps.Map(document.getElementById("map"), myOptions);
                
                var markerBounds = new google.maps.LatLngBounds();
                addressSelector_map.setCenter(result.location);
                
                addressSelector_panorama = addressSelector_map.getStreetView();
                addressSelector_panorama.setPosition(result.location);
                addressSelector_panorama.setOptions({ enableCloseButton:false });
                addressSelector_panorama.setPov({
                    heading: 0,
                    pitch:0
                });
                
                //create markers and validate building(s)
                addressSelector_createMarkerAndInfo(result.latitude,result.longitude,null,null,null,false);
                jQuery('#txtLatitude').text(result.latitude);
                jQuery('#txtLongitude').text(result.longitude);
                
                if(result.streetNum == null || result.streetNum == '')
                    //enable house number input
                    jQuery('#txtStreetAddressInput').show();
                else
                    jQuery('#txtStreetAddress').text(result.streetNum);
                
                jQuery('#txtRoute').text(result.route);
                
                jQuery('#txtNeighborhood').text(result.neighborhood);
                jQuery('#txtCity').text(result.city);
                jQuery('#txtAdminArea1').text(result.adminArea1);
                jQuery('#txtAdminArea2').text(result.adminArea2);
                jQuery('#txtCountry').text(result.country);
                jQuery('#txtPostalCode').text(result.postalCode);
                jQuery('#txtSubpremise').val(result.subPremise);
                addressSelector_RoomSuite = result.subPremise == null ? '' : result.subPremise;
        
                if(result.streetNum == null || result.streetNum == '' || addressSelector_manualPin)
                    //enable house number input
                    jQuery('#txtStreetAddressInput').show();
                else
                    jQuery('#lblStreetNumber').text(result.streetNum);
                
                jQuery('#lblStreet').text(result.route);
                jQuery('#lblCity').text(result.city);
                jQuery('#lblState').text(result.adminArea1);
                jQuery('#lblPostalCode').text(result.postalCode);
                jQuery('#lblCountry').text(result.country)
                jQuery('#buildingLat').text(result.latitude);
                jQuery('#buildingLng').text(result.longitude);
                
                contentString = '<div><span class="clickToMap" style="text-decoration:underline; cursor:pointer; font-size:larger; font-weight:bold;">'+result.formattedAddress+'</span><br /><br /><span style="font-weight:bold;"></span><br />';
                
                //Create info window
                addressSelector_infowindow = new google.maps.InfoWindow({
                    content: contentString
                });
                                
                
                if('{!canManuallyCreateBuilding}' == 'true'){
                    google.maps.event.addListener(addressSelector_map, 'click', function(event) {
                        //call function to create marker
                        if (addressSelector_marker) {
                            addressSelector_marker.setMap(null);
                            addressSelector_marker = null;
                        }
                        addressSelector_marker = addressSelector_createMarker(event.latLng, 'name', '<b>Location</b><br />'+event.latLng+'<br /><br /><input id="btnReverseGeo" type="button" onclick="addressSelector_reverseGeoCode(\''+event.latLng+'\')" value="Use this location"></input>');
                    });
                }
                
                //google.maps.event.addListener(addressSelector_infowindow, 'closeclick', function() { addressSelector_map.setCenter(addressSelector_marker.getPosition()); });
                google.maps.event.addDomListener(window, 'resize', function() { addressSelector_map.setCenter(result.location); });
                addressSelector_infoWindows.push(addressSelector_infowindow);
                //Set Bounds
                markerBounds.extend(result.location);
                //addressSelector_map.fitBounds(markerBounds);
                addressSelector_map.setCenter(result.location);
                searchBuildings(result.streetNum,result.route,result.adminArea1);
                
                addressSelector_manualPin = false;
            }
            else{
                if(jQuery('#map').is(":visible")){
                    jQuery('#map, #addInfo').hide();
                    jQuery("[id$='newBuildingSection']").hide();
                }
                if(!jQuery('#mapError').is(":visible"))
                    jQuery('#mapError').show();
                addressSelector_hideInput();
            }
        }
        
        function addressSelector_reverseGeoCode(latLng){
            addressSelector_manualPin = true;
            jQuery('#txtGoogleAddress').val(latLng);
            document.getElementById('btnMap').click()
        }
        
        /*function addressSelector_streetNumberChanged(){
            if(jQuery('#txtStreetAddressInput').text() != null && jQuery('#txtStreetAddressInput').text() != '')
                jQuery('#txtStreetAddress').text(jQuery('#txtStreetAddressInput').text());
        }
        
        function addressSelector_closeInfoWindows(){
            for(var i = 0; addressSelector_infoWindows.length > i ; ++i){
                addressSelector_infoWindows[i].close();
            }
        }*/
        
        function addressSelector_buildingSelected(){
            var row = jQuery('input[name=buildingSelect]:checked').closest("tr");
            var buildingID = row.find('[id$=buildingID').text();
            var buildingLat = null;
            var buildingLng = null;
            var buildingNetClass = null;
            var buildingName = '';
            
            buildingLat = row.find('[id$=buildingLat]').text();
            buildingLng = row.find('[id$=buildingLng]').text();
            buildingNetClass = row.find('[id$=buildingNetClass]').text();
            buildingName = row.find('[id$=buildingName]').text();
            
            addressSelector_createMarkerAndInfo(buildingLat,buildingLng,buildingNetClass,buildingName,buildingID,true);
            addressSelector_locationInfoWindow.open(addressSelector_map,addressSelector_locationMarker);
            addressSelector_notifyValidation(false);
        }
        
        function addressSelector_createButtonClick() {
            addressSelector_save(true);
        }
    
    	function FilterLocations(){
            var search = document.getElementById('FilterStringId').value;
            var list = document.getElementById('selParentServLoc');
            //var numParentLocs = '{!availableParentLocs.size}';
            var numParentLocs = '{!numavailableParentLocs}';
            var label = '{!ParentLocLabel}'.split('^');
            var value = '{!ParentLocValue}'.split('^');
           
            list.options.length = 0;
            list.options[list.options.length] = new Option('None', '', false, false);
            
            for (i = 0; i < parseInt(numParentLocs, 10); i++){
                if (search == null || label[i].toLowerCase().includes(search.toLowerCase())){
                    list.options[list.options.length] = new Option(label[i], value[i], false, false);
                }
            }           
        }
        
        function addressSelector_save(showMessage) {
            var row = jQuery('input[name=buildingSelect]:checked').closest("tr");
            var buildingID = row.find('[id$=buildingID').text();
        
            if((buildingID == '' || buildingID == null) && (jQuery('#lblStreetNumber').text() == null || jQuery('#lblStreetNumber').text() == '') && (jQuery('#txtStreetAddressInput').val() == null || jQuery('#txtStreetAddressInput').val() == '')){
                alert("Can't create service location on a building without a street number.  Please enter a house number.");
                return false;
            }
            else
            {
                var phone = jQuery('#txtPhone');
                if(phone.length > 0 && phone.val() != '' && 10 != phone.val().length){
                    alert("Phone length must be 10 digits");
                    return false;
                }
                else{
                    var parentLoc = jQuery('#selParentServLoc option:selected').val();                    
                    if(!jQuery('#chkBillable').prop('checked') && parentLoc == 'None'){
                       alert("If Billable field is not checked, Parent Location is required");
                       return false;
                    }else{
                        if(showMessage)
                            openModalWaitDialog('Creating Location...');
                        addressSelector_createLocation();
                        return true;                    
                    }
                }
            }
        }
        
        function addressSelector_createLocation(){
            var streetAddressText = '';
            var manualCreation = false;
            
            //Determine which option is selected
            var row = jQuery('input[name=buildingSelect]:checked').closest("tr");
            var buildingID = row.find('[id$=buildingID').text();
            if(buildingID == ""){
                if(jQuery('#lblStreetNumber') == null || jQuery('#lblStreetNumber').text() == ''){
                    streetAddressText = jQuery('#txtStreetAddressInput').val();
                    manualCreation = true;
                }
                else
                streetAddressText = jQuery('#lblStreetNumber').text();
                
                validate(
                    streetAddressText
                    ,jQuery('#lblStreet').text()
                    ,jQuery('#txtSubpremise').val()
                    ,jQuery('#lblCity').text()
                    ,jQuery('#lblState').text()
                    ,jQuery('#lblPostalCode').text()
                    ,jQuery('#txtZip4Input').val()
                    ,jQuery('#buildingLat').text()
                    ,jQuery('#buildingLng').text()
                    ,manualCreation
                    ,jQuery('#txtPhone').val()
                    ,jQuery('#txtName').val()
                    ,jQuery('#chkBillable').prop('checked')
                    ,jQuery('#selParentServLoc option:selected').val()
                    ,jQuery('#lblCountry').text()
                );
            }
            else{
                createLocOnExistingBuild(
                        buildingID
                        ,jQuery('#txtSubpremise').val()
                        ,jQuery('#txtPhone').val()
                        ,jQuery('#txtName').val()
                        ,jQuery('#chkBillable').prop('checked')
                        ,jQuery('#selParentServLoc option:selected').val());
            }
        }
        
        function addressSelector_toggleStreetView() {
            var toggle = addressSelector_panorama.getVisible();
            if (toggle == false) {
                addressSelector_panorama.setVisible(true);
            } else {
                addressSelector_panorama.setVisible(false);
            }
        }
        
        function addressSelector_showPanels(foundBuildingsSize){
            jQuery("[id$='buildingInfo']").show();
            
            if(foundBuildingsSize == 0){
                jQuery("[id$='buildingTable']").hide();
                jQuery("[id$='noResultsFound']").show();
            }
            else{
                jQuery("[id$='noResultsFound']").hide();
            }
            if(foundBuildingsSize == 0)
                jQuery("[id$='newBuildingSelect']").click();
        }
                        
        function addressSelector_notifySave(id){
            var callback = {!IF(ISBLANK(jsSaveCallback), 'null', jsSaveCallback)};
            if(callback != null){
                callback(id);
            }
        }
        
        function addressSelector_getSelectedBuildingRow(){
            return jQuery('input[id$=BuildingSelect]:checked').closest("tr");
        }
                        
        function addressSelector_notifyValidation(verified){
            var row = addressSelector_getSelectedBuildingRow();
            var callback = {!IF(ISBLANK(validateCallbackFunction), 'null', validateCallbackFunction)};
            addressSelector_RoomSuite = jQuery('#txtSubpremise').val() == null ? '' : jQuery('#txtSubpremise').val();
            var buildingID = row.find('[id$=buildingID').text();
            if(callback != null){
                if(verified){
                    var streetAddressText = '';
                    var manualCreation =  false;
                    if(jQuery('#lblStreetNumber') == null || jQuery('#lblStreetNumber').text() == ''){
                        streetAddressText = jQuery('#txtStreetAddressInput').val();
                        manualCreation = true;
                    }
                    else{
                        streetAddressText = jQuery('#lblStreetNumber').text();
                    }
                        
                    callback({verified: true
                            ,streetNum: (buildingID != null && buildingID != '') ? null : streetAddressText
                            ,street: row.find('[id$=lblStreet]').text()
                            ,roomSuite: jQuery('#txtSubpremise').val()
                            ,city: row.find('[id$=lblCity]').text()
                            ,state: row.find('[id$=lblState]').text()
                            ,postalCode: row.find('[id$=lblPostalCode]').text()
                            ,zip4: jQuery('#txtZip4Input').val()
                            ,latitude: row.find('[id$=buildingLat]').text()
                            ,longitude: row.find('[id$=buildingLng]').text()
                            ,manualCreate: manualCreation || addressSelector_manualPin
                            ,country: row.find('[id$=lblCountry]').text()
                            });
                }
                else{
                    callback({verified: false});
                }
            }
        }               
        
        function addressSelector_createMarker(latlng, name, html) {
            var contentString = html;
            var marker = new google.maps.Marker({
                position: latlng,
                map: addressSelector_map,
                zIndex: Math.round(latlng.lat()*-100000)<<5
            });
            
            google.maps.event.addListener(marker, 'click', function() {
                addressSelector_infowindow.setContent(contentString); 
                addressSelector_infowindow.open(addressSelector_map,marker);
            });
            
            google.maps.event.trigger(marker, 'click');    
            return marker;
        }
    </script>
    <style>
        #map {
            font-family: Arial;
            font-size:12px;
            line-height:normal !important;
            height:400px;
            background:transparent;
        }
        
        div.Onnet {
            background-color:#75FF5D; 
            border:solid 1px #47FF00;padding:3px;
        }
        
        .headerRow.hideHeader {
            display:none;
        }
        
        .bigWidth {
            width:95%;
        }
        
        .paddedCell {
            padding-left:5px;
        }
    </style>
    
    <apex:outputPanel id="foundBuildingsReRender">
        <script>
            function addressSelector_createMarkerAndInfo(latitude,longitude,netClass,buildingName,buildingID, addListener){
                var stringJS = '{!JSENCODE(jsonBuildingBAA)}';
                var buildingBAA = jQuery.parseJSON(stringJS);   
                
                if(addressSelector_locationMarker != null)
                    addressSelector_locationMarker.setMap(null);
                
                var latLng = new google.maps.LatLng(latitude,longitude);
                
                addressSelector_locationMarker = new google.maps.Marker({
                    position: latLng,
                    map: addressSelector_map,
                    icon: 'https://maps.google.com/mapfiles/ms/icons/blue-dot.png'
                });
                
                var contentString = '<div style="min-width:400px;"><span style="font-size:larger; font-weight:bold;">'+buildingName+'</span><br />';
                
                if(netClass != null && netClass != undefined && netClass != '')
                    contentString += '<span style="font-weight:bold;">Net Classification: </span>' + netClass + '<br />';
                
                if(buildingID != null && buildingID != undefined && buildingID != ''){
                    var baas = buildingBAA[buildingID];
                    for(var baax in baas){
                        var baa = baas[baax];
                        if(baa != null && baa != undefined){
                            if(baa.Access_Technology_Name__c == 'EoF'){
                                contentString +=
                                            '<div><span style="font-weight:bold;">Access Method: </span><span>'+baa.Access_Technology_Name__c+'</span> | '+
                                            '<span style="font-weight:bold;">Minimum Revenue: </span><span>'+(baa.Minimum_Required_Revenue__c == undefined? 'Not Listed': '$' + baa.Minimum_Required_Revenue__c)+'</span> | '+
                                            '<span style="font-weight:bold;">Maximum Bandwidth: </span><span>'+(baa.Maximum_Bandwidth__c == undefined? 'Not Listed' : baa.Maximum_Bandwidth__c + ' Mbps')+'</span></div>';
                            }
                            if(baa.Access_Technology_Name__c == 'EoC'){
                                contentString +=
                                            '<div><span style="font-weight:bold;">Access Method: </span><span>'+baa.Access_Technology_Name__c+'</span> | '+
                                            '<span style="font-weight:bold;">Minimum Revenue: </span><span>'+(baa.Minimum_Required_Revenue__c == undefined? 'Not Listed': '$' + baa.Minimum_Required_Revenue__c)+'</span> | '+
                                            '<span style="font-weight:bold;">Maximum Bandwidth: </span><span>'+(baa.Maximum_Bandwidth__c == undefined? 'Not Listed' : baa.Maximum_Bandwidth__c + ' Mbps')+'</span></div>';
                            }
                        }
                    }
                }
                
                contentString += '<div style="background-color:#ECECEC; border-top:1px solid black; border-bottom:1px solid black; padding:5px 0px 5px 0px; margin:10px 0px 10px 0px;">';
                    contentString += '<table style="width:100%; border-collapse:collapse;">';
                if({!NOT(ISNULL(account))}){
                        contentString += '<tr><td class="paddedCell">Service Location Name: </td><td><input class="bigWidth" type="textbox" id="txtName" /></td></tr>';
                }
                        contentString += '<tr><td class="paddedCell">Suite/Room: </td><td><input class="bigWidth" type="textbox" id="txtSubpremise" onchange="addressSelector_notifyValidation(false);" value="'+addressSelector_RoomSuite+'"/></td></tr>';
                if({!NOT(ISNULL(account))}){
                        contentString += '<tr><td class="paddedCell">Phone: </td><td><input class="bigWidth" type="textbox" id="txtPhone"></input></td></tr>';
                        contentString += '<tr><td class="paddedCell">Billable:</td><td><input style="margin:0;" type="checkbox" id="chkBillable"/></td></tr>';
                    	contentString += '<tr><td class="paddedCell">Parent Location Filter Criteria:</td><td><input type="textbox" id="FilterStringId" style="width:calc(100% - 50px);"/><input type="button" id="FilterButton" value="Filter" class="btn" onclick="FilterLocations();" /></td></tr>';                    
                    //contentString += '<tr><td class="paddedCell">Parent Location:</td><td><select id="selParentServLoc"><option>None</option><apex:repeat value="{!availableParentLocs}" var="loc"><option value="{!loc.value}">{!JSENCODE(loc.label)}</option></apex:repeat></select></td></tr>';
                		var numParentLocs = '{!numavailableParentLocs}';
						var label = '{!ParentLocLabel}'.split('^');
						var value = '{!ParentLocValue}'.split('^');
                        var ploptionString = '';
                    	for (i = 0; i < parseInt(numParentLocs, 10); i++){
                        	ploptionString += '<option value="' + value[i] + '">' + label[i] + '</option>';    
                        }
                    	contentString += '<tr><td class="paddedCell">Parent Location:</td><td><select id="selParentServLoc"><option>None</option>' + ploptionString + '</select></td></tr>';
                }
                    contentString += '</table>'
                contentString += '</div>'
                
                if({!validateMode} == true){
                    contentString += '<input type="button" id="btnValidate" value="Validate" class="btn" style="float:right;" onclick="addressSelector_notifyValidation(true);"></input>'
                }
                else{
                    contentString += '<input type="button" id="btnCreate" value="Save {!IF(NOT(ISNULL(account)), 'Service ', '')}Location" class="btn" style="float:right;" onclick="addressSelector_createButtonClick();"></input>'
                }
                contentString += '<div style="clear:both;"></div></div>'
                                
                addressSelector_locationInfoWindow = new google.maps.InfoWindow({
                                    content : contentString
                                });         
                addressSelector_locationInfoWindow.setZIndex(10000);
                if(addListener){ 
                    google.maps.event.addListener(addressSelector_locationMarker, 'click', function() {
                                    addressSelector_locationInfoWindow.open(addressSelector_map,addressSelector_locationMarker);
                                });
                }
                addressSelector_map.setCenter(latLng);
            }
        </script>
    </apex:outputPanel>
    
    <apex:outputPanel rendered="{!NOT(readOnlyMode)}">
        <div id="divcontent">
            <input type="textbox" id="txtGoogleAddress" style="width:300px;" onkeydown="if (event.keyCode == 13) document.getElementById('btnMap').click()"></input>
            <input type="button" id="btnMap" class="btn" value="Map" onclick="addressSelector_displayGoogleMap();"></input>
            <div id="mapError" style="display:none;">Address could not be found, please make sure the address is correct.<br /><br /></div>
            
            <div id="buildingInfo" style="padding-top:10px;">
                <apex:pageBlockSection id="existingBuildingSection" title="Existing Buildings" columns="1">
                    <apex:outputPanel id="existingBuildingPanel">
                        <apex:dynamicComponent componentValue="{!dt.GetDynamicTable}"/>
                    </apex:outputPanel>
                    
                    <!-- <apex:dataTable rowClasses="buildingRow" value="{!foundBuildings}" id="buildingTable" var="foundBuilding" styleClass="list" headerClass="headerRow">
                        <apex:column style="width:25px">
                            <input type="radio" id="existingBuildingSelect" name="buildingSelect" onclick="addressSelector_buildingSelected();"></input>
                        </apex:column>
                        <apex:column >
                            <apex:facet name="header">Building Name</apex:facet>
                            <apex:outputLink id="buildingName" target="_blank" value="/{!foundBuilding.Id}">{!foundBuilding.Name}</apex:outputLink>
                        </apex:column> 
                        <apex:column >
                            <apex:facet name="header">Address</apex:facet>
                            <apex:outputText value="{!foundBuilding.Address__c}" id="lblStreet"></apex:outputText>
                        </apex:column>
                        <apex:column >
                            <apex:facet name="header">City</apex:facet>
                            <apex:outputText value="{!foundBuilding.City__c}" id="lblCity"></apex:outputText>
                        </apex:column>
                        <apex:column >
                            <apex:facet name="header">County</apex:facet>
                            <apex:outputText value="{!foundBuilding.County__c}" id="lblCounty"></apex:outputText>
                        </apex:column>
                        <apex:column >
                            <apex:facet name="header">State</apex:facet>
                            <apex:outputText value="{!foundBuilding.State__c}" id="lblState"></apex:outputText>
                        </apex:column>
                        <apex:column >
                            <apex:facet name="header">Postal Code</apex:facet>
                            <apex:outputText value="{!foundBuilding.Postal_Code__c}" id="lblPostalCode"></apex:outputText>
                        </apex:column>
                        <apex:column >
                            <apex:facet name="header">Net Classification</apex:facet>
                            <apex:outputText value="{!foundBuilding.Net_Classification__c}" id="buildingNetClass"></apex:outputText>
                        </apex:column>
                        <apex:column >
                            <apex:facet name="header">Building Type</apex:facet>
                            <apex:outputText value="{!foundBuilding.Building_Type__c}"></apex:outputText>
                        </apex:column>
                        <apex:column >
                            <apex:facet name="header">Building Type</apex:facet>
                            <apex:outputText value="{!foundBuilding.Building_Type__c}"></apex:outputText>
                        </apex:column>
                        <apex:column >
                            <apex:facet name="header">Building CLLI</apex:facet>
                            <apex:outputText value="{!foundBuilding.Building_CLLI__c}"></apex:outputText>
                        </apex:column>
                        <apex:column >
                            <apex:facet name="header">Serving LSO</apex:facet>
                            <apex:outputText value="{!foundBuilding.Serving_LSO__r.Name}"></apex:outputText>
                        </apex:column>
                        <apex:column style="display:none;" headerClass="hideHeader">
                            <apex:outputText value="{!foundBuilding.id}" id="buildingID"></apex:outputText>
                        </apex:column>
                        <apex:column style="display:none;" headerClass="hideHeader">
                            <apex:outputText value="{!foundBuilding.Latitude__c}" id="buildingLat"></apex:outputText>
                        </apex:column>
                        <apex:column style="display:none;" headerClass="hideHeader">
                            <apex:outputText value="{!foundBuilding.Longitude__c}" id="buildingLng"></apex:outputText>
                        </apex:column>
                    </apex:dataTable> -->
                    <apex:outputPanel id="noResultsFound">No Results Found</apex:outputPanel>
                </apex:pageBlockSection>
            </div>
            
            <apex:pageBlockSection id="newBuildingSection" title="New Building" columns="1">        
                <table class="list" id="newBuildingTable" style="border-collapse:collapse;">
                    <thead>
                        <tr class="headerRow">
                            <th class="headerRow" scope="col" colspan="1"></th>
                            <th class="headerRow" scope="col" colspan="1">Street Number</th>
                            <th class="headerRow" scope="col" colspan="1">Street</th>
                            <th class="headerRow" scope="col" colspan="1">City</th>
                            <th class="headerRow" scope="col" colspan="1">State</th>
                            <th class="headerRow" scope="col" colspan="1">Postal Code</th>
                            <th class="headerRow" scope="col" colspan="1">Zip+4</th>
                            <th class="headerRow" scope="col" colspan="1">Country</th>
                            <th class="headerRow" scope="col" colspan="1">Latitude</th>
                            <th class="headerRow" scope="col" colspan="1">Longitude</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td colspan="1" style="width:25px">
                                <input type="radio" name="buildingSelect" id="newBuildingSelect"></input>
                            </td>
                            <td colspan="1">
                                <label id="lblStreetNumber"></label>
                                <input type="textbox" id="txtStreetAddressInput" style="display:none;"/>
                            </td>
                            <td colspan="1"><label id="lblStreet"></label></td>
                            <td colspan="1"><label id="lblCity"></label></td>
                            <td colspan="1"><label id="lblState"></label></td>
                            <td colspan="1"><label id="lblPostalCode"></label></td>
                            <td colspan="1">
                                <label id="lblZip4"></label>
                                <input type="textbox" id="txtZip4Input"/>
                            </td>
                            <td colspan="1"><label id="lblCountry"></label></td>
                            <td colspan="1"><label id="buildingLat"></label></td>
                            <td colspan="1"><label id="buildingLng"></label></td>
                            <td style="display:none;" id="buildingID"></td>
                        </tr>
                    </tbody>
                </table>  
            </apex:pageBlockSection>
            
            <div id="mapPanel">
                <input type="button" value="Toggle Street View" onclick="addressSelector_toggleStreetView();" style="position:relative;top:21px;right:-1px;float:right;z-index:3;"></input>
                <div id="map" style="display:none;border:1px solid;width:100%;"></div>
            </div>
        </div>
        <div id="saveButtonPanel" style="padding-top:10px;"></div>
    </apex:outputPanel>
    
    <apex:actionFunction name="createLocOnExistingBuild" action="{!CreateLocOnExistingBuild}" rerender="out" onComplete="openModalWaitDialog('Creating Location...'); addressSelector_notifySave('{!resultID}');">
        <apex:param name="buildingID" assignTo="{!buildingID}" value="" />
        <apex:param name="suite" value="" />
        <apex:param name="phone" assignTo="{!phone}" value="" />
        <apex:param name="overrideName" assignTo="{!overrideName}" value="" />
        <apex:param name="billable" assignTo="{!billable}" value="" />
        <apex:param name="parentLoc" assignTo="{!selectedParent}" value="" />
    </apex:actionFunction>
    <apex:actionFunction name="searchBuildings" action="{!SearchBuildings}" rerender="existingBuildingPanel,buildingTable, foundBuildingsReRender" status="searchStatus" onComplete="addressSelector_showPanels({!foundBuildings.size});">
        <apex:param name="streetNumber" value="" />
        <apex:param name="street" value="" />
        <apex:param name="state" value="" />
    </apex:actionFunction>
    <apex:actionFunction name="validate" action="{!ValidateBuildingAddress}" rerender="out" onComplete="closeModalWaitDialog(); addressSelector_notifySave('{!resultID}');">
        <apex:param name="streetNumber" value="" />
        <apex:param name="street" value="" />
        <apex:param name="suite" value="" />
        <apex:param name="city" value="" />
        <apex:param name="state" value="" />
        <apex:param name="postalCode" value="" />
        <apex:param name="zip4" value="" />
        <apex:param name="latitude" value=""/>
        <apex:param name="longitude" value=""/>
        <apex:param name="manualCreate" value="" />
        
        <!-- Service location info -->
        <apex:param name="phone" assignTo="{!phone}" value="" />
        <apex:param name="overrideName" assignTo="{!overrideName}" value="" />
        <apex:param name="billable" assignTo="{!billable}" value="" />
        <apex:param name="parentLoc" assignTo="{!selectedParent}" value="" />
        <apex:param name="country" value="" />
    </apex:actionFunction>
</apex:component>