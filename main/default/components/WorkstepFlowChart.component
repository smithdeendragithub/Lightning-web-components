<apex:component controller="WorkstepFlowChartController">
	<apex:includeScript value="{!URLFOR($Resource.jquery_ui_1_8_16_custom, 'js/jquery-1.6.2.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.svg, 'svg.min.js' )}" />
	
	<apex:attribute name="sfid" description="The ID of what we are pointing to starting off" type="Id" required="true"/>
	<apex:attribute name="maxWidth" description="Max width for the containing div" type="Integer" required="false"/>
	<apex:attribute name="maxHeight" description="Max height for the containing div" type="Integer" required="false"/>
	
	<div id="drawingContainer" style="overflow:auto;{!IF(NOT(ISNULL(maxWidth)), 'width:' + TEXT(maxWidth) + 'px;', '')}{!IF(NOT(ISNULL(maxHeight)), 'height:' + TEXT(maxHeight) + 'px;', '')}">
		<div><table style="float: right; border: 1">
				<tr>
					<td><b>LEGEND:</b></td>
					<td style="background-color: #9787ff;">Blue = "Complete"</td>
					<td style="background-color: #71d467">Green = "Open"</td>
					<td style="background-color: #feff8f;"> Yellow = "Pending"</td>
					<td style="background-color: #ffa8fb;">Pink = "Late"</td>
					<td style="background-color: #ff7575;">Red = "Blocked"</td>
				</tr>
				<tr><td></td></tr>
			</table></div>
		<div id="drawing">
		<div class="hoverdiv">
		</div>	
		</div>
		
	</div>
	<script type="text/javascript">
		var jsonPCWorkstepList = {!jsonPCWorkstepList};
		var jsonPCDependentMap = {!jsonPCDependentMap};
		var jsonReversedWorkstepLevelMap = {!jsonReversedWorkstepLevelMap};
		
		jQuery(document).ready(function(){
				buildSVG();
			});
		
		function buildSVG(){
			var draw = SVG('drawing');
			var currentID = '{!sfid}';
			
			//Get the min and max dates
			var minDate = null;
			var maxDate = null;
			for(var wsID in jsonPCWorkstepList){
				var workstep = jsonPCWorkstepList[wsID];
				
				var dates = [ workstep.Start_Date__c, workstep.End_Date__c ];
				
				for(var x = 0; dates.length > x; x++){
					if(minDate == null || (dates[x] != null && minDate > dates[x])){
						minDate = dates[x];
					}
					if(maxDate == null || (dates[x] != null && dates[x] > maxDate)){
						maxDate = dates[x];
					}
				}
			}
			
			minDate = new Date(minDate);
			maxDate = new Date(maxDate);
			
			//For each day from min to max, print out a row for the day or one (with ellipse label) for a sequence of days without events
			var noWS = false;
			var row = 0;
			var dt = minDate;
			var rowHeight = 50;
			var rowGroups = [];
			var currentRow = null;
			do{
				var dtString = formatDate(dt);
				
				var dateLabel = null;
				var dateLevels = {};
				for(var level in jsonReversedWorkstepLevelMap){
					for(var i = 0; jsonReversedWorkstepLevelMap[level].length > i; i++){
						var wsID = jsonReversedWorkstepLevelMap[level][i];
						var workstep = jsonPCWorkstepList[wsID];
																			
						if(workstep.Start_Date__c == dtString && workstep.Duration__c > 0){												
							if(dateLabel == null){
								dateLabel = draw.text(dtString).move(0, 0 + (row * rowHeight)+5);
							}
							
							if(dateLevels[level] == undefined){
								dateLevels[level] = [];
							}
							dateLevels[level].push(wsID);
							noWS = false;
						}
					}
				}
				
				var subRow = 0;
				for(var level in dateLevels){
					if(++subRow > 1){
						row++;
					}
					
					var rowGroup = draw.group();
					var column = 0;
					for(var i = 0; dateLevels[level].length > i; i++){
						var wsID = dateLevels[level][i];
						var workstep = jsonPCWorkstepList[wsID];
						
						if(wsID.startsWith(currentID)){
							currentWorkstep = workstep;
						}
						
						var ws = draw.group();
						var wsRect = draw.rect(240, 28);
						
						ws.addClass('wsNode');
						if(workstep.Status__c == 'Complete'){
							ws.addClass('statusComplete');
						}
						else if(workstep.Status__c == 'Blocked'){
							ws.addClass('statusBlocked');
						}
						else if(workstep.On_time_Late_Workstep__c < 0){
							ws.addClass('statusLate');
						}
						else if(workstep.Status__c == 'Open'){
							ws.addClass('statusOpen');
						}
						else{
							ws.addClass('statusPending');
						}
						
						var wsLabel = draw.text(workstep.Name);
						wsLabel.center(120, 14);
						
						ws.add(wsRect);
						ws.add(wsLabel);
						
						rowGroup.add(ws);
						ws.move(column * 250, 0);
						
						ws.workstep = workstep;
						workstep.shape = ws;
						workstep.connections = [];
						wsRect.click(workstepClick);
						wsRect.group = ws;
						column++;
					}
					rowGroup.move(100, (row * rowHeight));
					rowGroups.push(rowGroup);
				}
				
				//Put spacers between dates without a starting workstep
				if(dateLabel == null){
					if(maxDate.getTime() == dt.getTime()){
						//Always print the final date
						dateLabel = draw.text(dtString).move(0, 0 + (row * rowHeight)+5);
					}
					else if(noWS){
						row--;	//do not advance
					}
					else{
						noWS = true;
						dateLabel = draw.text('...').move(0, 0 + (row * rowHeight)+5);
					}
				}
				
				if(dateLabel != null){
					//Draw the end marker for the date range
					var y = (row * rowHeight) + rowHeight;
					var marker = draw.line(0, y, 80, y).stroke({ width: 1 });
				}
				
				dt.setDate(dt.getDate() + 1);
				row++;
			}while(maxDate.getTime() >= dt.getTime());
			
			var maxX = 0;
			var maxY = (row * rowHeight) + rowHeight;
			
			//Center the row groups
			for(var i = 0; rowGroups.length > i; i++){
				var tbox = rowGroups[i].tbox();
				if(tbox.width > maxX){
					maxX = tbox.width;
				}
			}
			
			for(var i = 0; rowGroups.length > i; i++){
				var tbox = rowGroups[i].tbox();
				rowGroups[i].center(100+(maxX/2), tbox.y+(tbox.height/2));
			}
			
			//Now draw the connecting lines
			for(var pID in jsonPCDependentMap){
				var pWorkstep = jsonPCWorkstepList[pID];
				
				if(pWorkstep == null || pWorkstep.shape == null) continue;			//todo: everything SHOULD have drawn by now
				
				var pBox = pWorkstep.shape.get(0).tbox();
				
				for(var i = 0; jsonPCDependentMap[pID].length > i; i++){
					var dID = jsonPCDependentMap[pID][i].Dependent_Workstep__c;
					var dWorkstep = jsonPCWorkstepList[dID];
					
					if(dWorkstep == null || dWorkstep.shape == null) continue;			//todo: everything SHOULD have drawn by now
					
					var dBox = dWorkstep.shape.get(0).tbox();
					
					//Bottom center to top center
					var line = draw.line((pBox.x+pBox.width/2), (pBox.y+pBox.height), (dBox.x+dBox.width/2), dBox.y).back();
					line.addClass('predecessorInactive');
					
					pWorkstep.connections.push(line);
					dWorkstep.connections.push(line);
				}
			}
		
			//Resize the main svg
			draw.size(100 + maxX, maxY);
			
			//Select the current workstep
			if(currentWorkstep != null){
				workstepSelect(currentWorkstep);
				//todo: scroll to the current workstep
				
				var tbox = currentWorkstep.shape.get(0).tbox();
				window.scrollTo(tbox.x, tbox.y);
			}
		}
		
		function formatDate(date) {		
		    var d = new Date(date);		    
	        var month = '' + (d.getMonth() + 1);	        
	        var day = '' + (d.getDate());	        
	        var year = d.getFullYear();

		    if (month.length < 2) month = '0' + month;
		    if (day.length < 2) day = '0' + day;

		    return [year, month, day].join('-');
		}
		
		function workstepClick(){
			SVG.select('.wsNode.selected').removeClass('selected');
			SVG.select('.predecessorActive').removeClass('predecessorActive').addClass('predecessorInactive').attr({'stroke-width': 1});
			jQuery('.hoverdiv').empty();
			
			if(this.group != null && this.group != undefined){
				workstepSelect(this.group.workstep);
			}
		}
		
		function workstepSelect(workstep){
			workstep.shape.addClass('selected');
			for(var i = 0; workstep.connections.length > i; i++){
				var line = workstep.connections[i];
				line.removeClass('predecessorInactive').addClass('predecessorActive').attr({'stroke-width': 3});
			}
			
			var descText = workstep.Name;
			descText += '<br/><b>Status: </b>' + workstep.Status__c;
			descText += '<br/><b>Start Date: </b>' + workstep.Start_Date__c;
			descText += '<br/><b>End Date: </b>' + workstep.End_Date__c;
			jQuery('.hoverdiv').append(descText);
		}
	</script>
	<style>
		.wsNode.selected > rect{
			stroke: #000000;	//black
			stroke-width: 5;
		}
		
		.wsNode > text{
		}
		
		.statusComplete > rect{
			fill: #9787ff;	//blue
		}
		
		.statusOpen > rect{
			fill: 	#71d467;	//green
		}
		
		.statusPending > rect{
			fill: #feff8f;	//yellow
		}
		
		.statusBlocked > rect{
			fill: #ff7575;	//Red
		}
		
		.statusLate > rect{
			fill: #ffa8fb;	//Pink
		}
		
		.predecessorActive{
			stroke: #000000;	//black
		}
		
		.predecessorInactive{
			stroke: #aaaaaa;	//light gray
		}
		
		div.hoverdiv{
			position: fixed;
			bottom: 0;
			right: 0;
			text-align: right;
		}
	</style>
</apex:component>