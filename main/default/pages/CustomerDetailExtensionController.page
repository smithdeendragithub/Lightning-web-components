<apex:page standardController="Customer_Detail__c" extensions="CustomerDetailExtensionController">
    <apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" />
    
    <script>function setFocusOnLoad() {}</script>
    <style>
        <!-- div.pbHeader h2.mainTitle{
            display: none;
        } -->
        
        div.hoverdiv{
            position: fixed;
            bottom: 0;
            right: 0;
        }
        
        div.hoverdiv:hover{
            opacity: 0;
        }
    </style>
    <apex:outputPanel id="out">
        <apex:pageMessages escape="false" />
        <div class="hoverdiv">
            <apex:repeat value="{!customErrorMessages}" var="msg">
                <apex:pageMessage summary="{!msg}" severity="error" strength="1"/>
            </apex:repeat>
            <apex:repeat value="{!customInfoMessages}" var="msg">
                <apex:pageMessage summary="{!msg}" severity="info" strength="1"/>
            </apex:repeat>
        </div>
    </apex:outputPanel>
    <apex:detail subject="{!customerDetail.id}" inlineEdit="false" showChatter="true">
        <apex:form id="customButton_frm">
            <apex:commandButton id="relink_customButton" value="Relink" onclick="linkObject()" rendered="{!canRelink}"/>
            <apex:actionFunction name="doLinkObject" action="{!linkToObject}" rerender="out">
                <apex:param name="linkID" value=""/>
            </apex:actionFunction>
            <apex:commandButton id="integrate_customButton" value="Integrate" onclick="window.open('../apex/CustomerIntegration?id={!customerDetail.Id}', '_self', false); return false;" rendered="{!canIntegrate}"/>
            <apex:commandButton id="invoice_customButton" value="Customer Invoices" onclick="window.open('../apex/CustomerInvoices?id={!serviceLocation.Id}&name={!JSENCODE(serviceLocation.name)}'); return false;" disabled="{!invoiceReadOnlyMode}" title="{!invoiceHelpText}"/>
        </apex:form>
        <div style="display: none;">
            <apex:form >
                <apex:commandButton id="customSave" value="Save" onclick="doFullSave()" style="display: none;"/>
                <apex:actionFunction name="doFullSave" action="{!doSave}"/>
            </apex:form>
            <apex:form id="frm_AdditionalDetails">
                <table class="detailList" cellspacing="0" cellpadding="0" border="0">
                    <tbody>
                        <tr>
                            <td class="labelCol">Account</td>
                            <td class="dataCol col02">
                                <apex:outputText value="" rendered="{!ISNULL(account)}"/>
                                <c:HoverLink sObjectId="{!account.id}" text="{!account.name}" rendered="{!NOT(ISNULL(account))}"/>
                            </td>
                            <td class="labelCol">Service Location</td>
                            <td class="dataCol">
                                <apex:outputText value="" rendered="{!ISNULL(serviceLocation)}"/>
                                <c:HoverLink sObjectId="{!serviceLocation.id}" text="{!serviceLocation.name}" rendered="{!NOT(ISNULL(serviceLocation))}"/>
                            </td>
                        </tr>
                        <tr>
                            <td class="labelCol">Care Organization</td>
                            <td class="dataCol col02">
                                <!--<apex:outputText value="" rendered="{!ISNULL(customerDetail.Care_Organization__c)}"/>
                                <apex:outputText value="{!customerSettings[customerDetail.Care_Organization__c].Name}" rendered="{!NOT(ISNULL(customerDetail.Care_Organization__c)) && NOT(canModifyCareOrg)"/>-->
                                <apex:selectList id="sl_careOrganizaion" value="{!customerDetail.Care_Organization__c}" multiselect="false" size="1" disabled="{!NOT(canModifyCareOrg) && NOT(isAdmin)}">
                                    <apex:selectOptions value="{!selectOptions['Care_Organization']}"/>
                                    <apex:actionSupport event="onchange" rerender="sl_careOrg" oncomplete="checkSaveVisible(true)"/>
                                </apex:selectList>
                                <span id="persist_careOrganizaion" class="customHidden">{!customerDetail.Care_Organization__c}</span>
                            </td>
                            <td class="labelCol">Business Unit</td>
                            <td class="dataCol">
                                <apex:outputText value="{!customerDetail.Business_Unit__c}"/>
                            </td>
                        </tr>
                        <tr>
                            <td class="labelCol">Reporting Company</td>
                            <td class="dataCol col02">
                                <apex:outputText value="" rendered="{!ISNULL(customerDetail.Reporting_Company__c)}"/>
                                <apex:outputText value="{!customerSettings[customerDetail.Reporting_Company__c].Name}" rendered="{!NOT(ISNULL(customerDetail.Reporting_Company__c))}"/>
                            </td>
                            &nbsp;
                            &nbsp;
                        </tr>
                        <tr>
                            <td class="labelCol">Collection Code</td>
                            <td class="dataCol col02">
                                <apex:inputHidden id="hdn_previousCollectionCode" value="{!previousCollectionCode}" />
                                <apex:selectList id="sl_collectionCode" value="{!customerDetail.Collection_Code__c}" multiselect="false" size="1" disabled="{!(ISNULL(customerDetail.ICC_Subscriber_ID__c) || NOT(isCollectionsUser || isBillingUser)) && NOT(isAdmin)}">
                                    <apex:selectOptions value="{!selectOptions['Collection_Code']}"/>
                                    <apex:actionSupport event="onchange" rerender="sl_collectionCode" oncomplete="checkSaveVisible(true)"/>
                                </apex:selectList>
                                <span id="persist_collectionCode" class="customHidden">{!customerDetail.Collection_Code__c}</span>
                            </td>
                            <td class="labelCol">Disputed Amount</td>
                            <td class="dataCol">
                                <apex:inputText id="disputedAmount" value="{!textValues['disputedAmount']}" >
                                    <apex:actionSupport event="onchange" rerender="disputedAmount" oncomplete="checkSaveVisible(true)"/>
                                </apex:inputText>
                                <span id="persist_disputedAmount" class="customHidden">{!textValues['disputedAmount']}</span>
                            </td>
                        </tr>
                        <tr>
                            <td class="labelCol">User who put into dispute</td>
                            <td class="dataCol">
                                <apex:inputField id="userIntoDispute" value="{!customerDetail.User_Into_Dispute__c}" >
                                    <apex:actionSupport event="onchange" rerender="userIntoDispute" oncomplete="checkSaveVisible(true)"/>
                                </apex:inputField>
                                <span id="persist_userIntoDispute" class="customHidden">{!customerDetail.User_Into_Dispute__c}</span>
                            </td>
                        </tr>
                        <tr>
                            <td class="labelCol">Date Account Placed in AID</td>
                            <td class="dataCol col02">
                                <!--apex:inputField id="dateInAID" value="{!customerDetail.Date_in_AID__c}"/-->
                                <apex:outputText value="{0,date,MM'/'dd'/'yyyy}">
                                   <apex:param value="{!customerDetail.Date_in_AID__c}"></apex:param>
                                </apex:outputtext>                                
                                
                            </td>
                            <td class="labelCol">Days since put into AID</td>
                            <td class="dataCol">
                                <apex:outputText value="{0, number, integer}">
                                   <apex:param value="{!customerDetail.Days_in_AID__c}"></apex:param>
                                </apex:outputtext>                                
                            </td>
                        </tr>                                                
                        <tr>
                            <td class="labelCol">Exchange</td>
                            <td class="dataCol col02">
                                <apex:selectList id="sl_exchange" value="{!customerDetail.Exchange__c}" multiselect="false" size="1" disabled="{!NOT(isAdmin || exchangeNeeded) }">
                                    <apex:selectOptions value="{!selectOptions['Exchange']}"/>
                                    <apex:actionSupport event="onchange" rerender="sl_exchange" oncomplete="checkSaveVisible(true)"/>
                                </apex:selectList>
                                <apex:outputpanel rendered="{!exchangeNeeded}"><img class="fieldalertimage" src="/img/msg_icons/error16.png" title="An exchange value is required for this customer"/></apex:outputpanel>
                                <span id="persist_exchange" class="customHidden">{!customerDetail.Exchange__c}</span>
                            </td>
                            <td class="labelCol">Market Type</td>
                            <td class="dataCol">
                                <apex:selectList id="sl_marketType" value="{!customerDetail.Market_Type__c}" multiselect="false" size="1" disabled="{!NOT(ISNULL(customerDetail.ICC_Subscriber_ID__c)) && NOT(isAdmin)}">
                                    <apex:selectOptions value="{!selectOptions['Market_Type']}"/>
                                    <apex:actionSupport event="onchange" action="{!marketTypeUpdated}" rerender="sl_billCycle, op_BillCycle" oncomplete="checkSaveVisible(true);"/>
                                </apex:selectList>
                                <span id="persist_marketType" class="customHidden">{!customerDetail.Market_Type__c}</span>
                            </td>
                        </tr>
                        <tr>
                            <td class="labelCol">Market Subtype</td>
                            <td class="dataCol col02">
                                <apex:selectList id="sl_marketSubtype" value="{!customerDetail.Market_Subtype__c}" multiselect="false" size="1" disabled="{!NOT(ISNULL(customerDetail.ICC_Subscriber_ID__c)) && NOT(isAdmin)}">
                                    <apex:selectOptions value="{!selectOptions['Market_Subtype']}"/>
                                    <apex:actionSupport event="onchange" rerender="sl_marketSubtype" oncomplete="checkSaveVisible(true)"/>
                                </apex:selectList>
                                <span id="persist_marketSubtype" class="customHidden">{!customerDetail.Market_Subtype__c}</span>
                            </td>
                            <td class="labelCol">Market Area</td>
                            <td class="dataCol">
                                <apex:selectList id="sl_marketArea" value="{!customerDetail.Market_Area__c}" multiselect="false" size="1" disabled="{!NOT(canUpdateMarketAreas)}">
                                    <apex:selectOptions value="{!selectOptions['Market_Area']}"/>
                                    <apex:actionSupport event="onchange" action="{!marketAreaUpdated}" rerender="sl_billCycle, op_BillCycle, sl_provMarketArea, sl_marketType" oncomplete="checkSaveVisible(true);"/>
                                </apex:selectList>
                                <span id="persist_marketArea" class="customHidden">{!customerDetail.Market_Area__c}</span>
                            </td>
                        </tr>
                        <tr>
                            <td class="labelCol last">Provisioning Market Area</td>
                            <td class="dataCol col02 last">
                                <apex:selectList id="sl_provMarketArea" value="{!customerDetail.Prov_Market_Area__c}" multiselect="false" size="1" disabled="{!NOT(canUpdateMarketAreas)}">
                                    <apex:selectOptions value="{!selectOptions['Prov_Market_Area']}"/>
                                    <apex:actionSupport event="onchange" rerender="sl_provMarketArea" oncomplete="checkSaveVisible(true);"/>
                                </apex:selectList>
                                <span id="persist_provMarketArea" class="customHidden">{!customerDetail.Prov_Market_Area__c}</span>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </apex:form>
            <apex:form style="display: inline" rendered="{!NOT(parentIsBillable)}">
                <apex:selectList id="sl_billCycle" value="{!customerDetail.Bill_Cycle__c}" multiselect="false" size="1" disabled="{!NOT(isBillingUser) && NOT(isAdmin)}">
                    <apex:selectOptions value="{!selectOptions['Bill_Cycle_Schedule']}"/>
                    <apex:actionSupport event="onchange" rerender="op_BillCycle" oncomplete="checkSaveVisible(true)"/>
                </apex:selectList>
                <apex:outputpanel rendered="{!billCycleMismatch}"><img class="fieldalertimage" src="/img/msg_icons/error16.png" title="Bill cycle '{!persistedBillCycleName}' is not valid for the current market area and market type"/></apex:outputpanel>
                <span id="persist_billCycle" class="customHidden">{!persistedBillCycle}</span>
            </apex:form>
            <apex:form id="frm_billCycle" rendered="{!NOT(parentIsBillable)}">
                <apex:outputPanel id="op_BillCycle">
                    <apex:pageBlock rendered="{!NOT(ISNULL(customerDetail.Bill_Cycle__c))}">
                        <apex:pageBlockSection >
                            <apex:outputText label="ID" value="{!customerSettings[customerDetail.Bill_Cycle__c].Value__c}"/>
                            <apex:outputText value="{!customerSettings[customerDetail.Bill_Cycle__c].External_ID__c}"/>
                            <apex:outputText value="{!customerSettings[customerDetail.Bill_Cycle__c].State__c}"/>
                            <apex:outputText value="{!customerSettings[customerDetail.Bill_Cycle__c].Credit_Class_High__c}"/>
                            <apex:outputText value="{!customerSettings[customerDetail.Bill_Cycle__c].Credit_Class_Medium__c}"/>
                            <apex:outputText value="{!customerSettings[customerDetail.Bill_Cycle__c].Credit_Class_Low__c}"/>
                            <apex:outputText label="Market Area" value="{!IF(ISNULL(customerSettings[customerDetail.Bill_Cycle__c].Market_Area__c), 'None', marketAreas[customerSettings[customerDetail.Bill_Cycle__c].Market_Area__c].Name)}"/>
                            <apex:outputText label="Market Type" value="{!IF(ISNULL(customerSettings[customerDetail.Bill_Cycle__c].Market_Type__c), 'None', customerSettings[customerSettings[customerDetail.Bill_Cycle__c].Market_Type__c].Name)}"/>
                        </apex:pageBlockSection>
                    </apex:pageBlock>
                </apex:outputPanel>
            </apex:form>
            <apex:form id="frm_Addresses">
                <apex:pageBlock id="pb_Addresses">
                    <apex:pageBlockSection id="pbs_Addresses" title="Active" collapsible="true" columns="1">
                        <apex:dataTable id="dtAddresses" value="{!addresses}" var="addr"
                            cellspacing="0" cellpadding="0" border="0" styleClass="list" headerClass="headerRow">
                            <apex:column style="width: 1%;">
                                <apex:facet name="header"><input id="cb{!addr.id}" type="checkbox" value="false" onclick="selectAllToggled(this)"/></apex:facet>
                                <input elemID="{!addr.id}" selectAllCheckboxID="cb{!addr.id}" type="checkbox" value="false" class="tableCheckbox" onclick="checkboxToggled(this)"/>
                            </apex:column>
                            <apex:column title="{!addr.MSAGAddress}" >
                                <apex:outputPanel >
                                    <apex:inputText value="{!addr.overrideName}" html-placeholder="{!IF(NOT(ISBLANK(customerDetail.Last_Name__c)), customerDetail.Last_Name__c + ', ' + customerDetail.First_Name__c, customerDetail.Name)}" style="width:95%" rendered="{!addr.overrideNameEnabled}"/>
                                    <apex:outputText escape="false" rendered="{!addr.overrideNameEnabled}">
                                        <br/>
                                    </apex:outputText>
                                    <apex:outputText value="{!IF(addr.overrideNameEnabled, ' (', '')}{!addr.name}{!IF(addr.overrideNameEnabled, ')', '')}"/>
                                </apex:outputPanel>
                            </apex:column>
                            <apex:column title="{!addr.MSAGAddress}">
                                <apex:facet name="header">Street</apex:facet>
                                <apex:outputText value="{!addr.street}" rendered="{!addr.locationMode}"/>
                                <apex:inputText value="{!addr.street}" style="width:95%" rendered="{!NOT(addr.locationMode)}"/>
                            </apex:column>
                            <apex:column title="{!addr.MSAGAddress}" >
                                <apex:facet name="header">City</apex:facet>
                                <apex:outputText value="{!addr.city}" rendered="{!addr.locationMode}"/>
                                <apex:inputText value="{!addr.city}" style="width:95%" rendered="{!NOT(addr.locationMode)}"/>
                            </apex:column>
                            <apex:column title="{!addr.MSAGAddress}">
                                <apex:facet name="header">State</apex:facet>
                                <apex:outputText value="{!addr.state}" rendered="{!addr.locationMode}"/>
                                <apex:inputText value="{!addr.state}" style="width:95%" rendered="{!NOT(addr.locationMode)}"/>
                            </apex:column>
                            <apex:column title="{!addr.MSAGAddress}" >
                                <apex:facet name="header">Postal Code</apex:facet>
                                <apex:outputText value="{!addr.postalCode + IF(NOT(ISBLANK(addr.zip4)), '-' + addr.zip4, '')}" rendered="{!addr.locationMode}"/>
                                <apex:inputText value="{!addr.postalCode}" style="width:95%" rendered="{!NOT(addr.locationMode)}"/>
                            </apex:column>
                            <apex:column title="{!addr.MSAGAddress}" >
                                <apex:facet name="header">Country</apex:facet>
                                <apex:outputText value="{!addr.country}" rendered="{!addr.locationMode}"/>
                                <apex:inputText value="{!addr.country}" style="width:95%" rendered="{!NOT(addr.locationMode)}"/>
                            </apex:column>                                
                            <apex:column title="{!addr.MSAGAddress}" >
                                <apex:facet name="header">Room/Suite</apex:facet>
                                <apex:inputText value="{!addr.roomSuite}" style="width:95%" rendered="{!NOT(addr.locationMode && ISNULL(addr.locationId))}"/>
                            </apex:column>
                            <apex:column title="{!addr.MSAGAddress}" >
                                <apex:facet name="header">Message</apex:facet>
                                <apex:outputText value="{!addr.message}" style="color:red"/>
                            </apex:column>
                            <apex:facet name="footer">
                                <apex:outputPanel >
                                    <apex:commandButton value="Update" onclick="doUpdateAddresses(gatherSelection('dtAddresses')); return false;"/>
                                    <apex:commandButton value="Update with validated address" id="btnUpdateWithValidatedAddress" onclick="if(addressSelector_save()) openModalWaitDialog('Saving addresses...'); return false;" disabled="true"/>
                                    <input class="btn" type="button" value="Search Address" onclick="openAddressDiaglog(); return false;"/>
                                        
                                </apex:outputPanel>
                            </apex:facet>
                        </apex:dataTable>
                    </apex:pageBlockSection>
                    &nbsp;
                    <apex:pageBlockSection title="Validated Address" id="pbs_AdditionalAddress" collapsible="false" columns="1">
                        <!-- <apex:pageBlockSection collapsible="false" columns="1">
                            <c:AddressSelector autoBindSearchBox="false" saveCallbackFunction="doSaveAddresses" validateCallbackFunction="validateSelectedAddress" validateMode="true"/>
                        </apex:pageBlockSection> -->
                        <apex:pageBlockSection id="pbs_ValidatedAddress" columns="1">
                            <apex:outputText label="Validated Address" value="{!validatedAddress}" rendered="{!NOT(ISNULL(validatedAddress))}"/>
                            <apex:outputText label="Other Formats" rendered="{!NOT(ISNULL(addressFormats) || addressFormats.size == 0)}">
                                <apex:dataTable id="dtAddressFormats" value="{!addressFormats}" var="af"
                                    cellspacing="0" cellpadding="0" border="0" styleClass="list" headerClass="headerRow">
                                        <apex:column >
                                            <apex:facet name="header">Type</apex:facet>
                                            <apex:outputText value="{!af.location.name}"/>
                                        </apex:column>
                                        <apex:column >
                                            <apex:facet name="header">House Number</apex:facet>
                                            <apex:inputText id="txtHouseNumber" value="{!af.format.House_Number__c}" disabled="{!af.typeid == 1 || af.validated}" size="6"/>
                                        </apex:column>
                                        <apex:column >
                                            <apex:facet name="header">Pre-Directional</apex:facet>
                                            <apex:inputText id="txtPreDirectional" value="{!af.format.PreDirectional__c}"  disabled="{!af.typeid == 1 || af.validated}" size="6"/>
                                        </apex:column>
                                        <apex:column >
                                            <apex:facet name="header">Street</apex:facet>
                                            <apex:inputText id="txtStreet" value="{!af.format.Street__c}"  disabled="{!af.typeid == 1 || af.validated}"/>
                                        </apex:column>
                                        <apex:column >
                                            <apex:facet name="header">Street Type</apex:facet>
                                            <apex:inputText id="txtStreetType" value="{!af.format.Street_Type__c}"  disabled="{!af.typeid == 1 || af.validated}" size="6"/>
                                        </apex:column>
                                        <apex:column >
                                            <apex:facet name="header">Post-Directional</apex:facet>
                                            <apex:inputText id="txtPostDirectional" value="{!af.format.PostDirectional__c}"  disabled="{!af.typeid == 1 || af.validated}" size="6"/>
                                        </apex:column>
                                        <apex:column >
                                            <apex:facet name="header">City</apex:facet>
                                            <apex:inputText id="txtCity" value="{!af.format.City__c}"  disabled="{!af.typeid == 1 || af.validated}"/>
                                        </apex:column>
                                        <apex:column >
                                            <apex:facet name="header">Validated</apex:facet>
                                            <apex:image value="../img/msg_icons/confirm16.png" width="16" height="16" rendered="{!af.validated}"/>
                                            <apex:image value="../img/msg_icons/error16.png" width="16" height="16" rendered="{!NOT(af.validated)}" title="{!af.error}"/>
                                        </apex:column>
                                        <apex:column >
                                            <apex:facet name="header">Update</apex:facet>
                                            <apex:commandButton onclick="updateAddressFormatByID('{!JSENCODE(af.location.id)}'); return false;" value="{!IF(af.typeid == 1, 'Click to Update', 'Validate')}" disabled="{!af.typeid != 1 && af.validated}"/>
                                        </apex:column>
                                </apex:dataTable>
                            </apex:outputText>
                        </apex:pageBlockSection>
                    </apex:pageBlockSection>
                    <c:MSAGAddressSelector ></c:MSAGAddressSelector>
                </apex:pageBlock>
            
                <apex:actionFunction name="doValidateAddress" action="{!validateAddress}" rerender="out, dtAddresses, pbs_ValidatedAddress,addressSelectorModal" onComplete="enableUpdateWithValidatedAddress({!NOT(ISBLANK(validatedAddress))}); closeModalWaitDialog();closeAddressDiaglog();">
                    <apex:param name="streetNumber" value="" />
                    <apex:param name="street" value="" />
                    <apex:param name="suite" value="" />
                    <apex:param name="city" value="" />
                    <apex:param name="state" value="" />
                    <apex:param name="postalCode" value="" />
                    <apex:param name="latitude" value=""/>
                    <apex:param name="longitude" value=""/>
                    <apex:param name="manualCreate" value=""/>
                    <apex:param name="country" value=""/>
                </apex:actionFunction>
                <apex:actionFunction name="doUpdateAddresses" action="{!updateAddresses}" rerender="out, dtAddresses">
                    <apex:param name="addressIDs" value=""/>
                </apex:actionFunction>
                <apex:actionFunction name="doUpdateAddressesFromValidatedAddress" action="{!updateAddressesFromValidatedAddress}" oncomplete="closeModalWaitDialog();" rerender="out, dtAddresses">
                    <apex:param name="addressIDs" value=""/>
                    <apex:param name="locationID" value=""/>
                </apex:actionFunction>
                <apex:actionFunction name="doUpdateAddressFormat" action="{!updateAddressFormat}" rerender="out, dtAddressFormats">
                    <apex:param name="formatId" value="" />
                    <apex:param name="houseNumber" value="" />
                    <apex:param name="preDirectional" value="" />
                    <apex:param name="street" value="" />
                    <apex:param name="streetType" value="" />
                    <apex:param name="postDirectional" value="" />
                    <apex:param name="city" value="" />
                    
                </apex:actionFunction>
            </apex:form>
            <apex:form id="frm_Contacts">
                <apex:pageBlock id="pb_Contacts">
                    <apex:outputPanel id="jsContactEmailPhone">
                        <script type="text/javascript">
                            var contactEmails = {!IF(ISNULL(jsonContactEmails), 'null', jsonContactEmails)};
                            var contactPhoneNumbers = {!IF(ISNULL(jsonContactPhoneNumbers), 'null', jsonContactPhoneNumbers)};
                        </script>
                    </apex:outputPanel>
                    <apex:outputPanel id="contactOut"/>
                    <apex:pageBlockSection id="pbsResponsibleParty" title="Responsible Party" collapsible="true" columns="2" rendered="{!NOT(ISNULL(responsibleParty))}">
                        <apex:selectList label="Contact" value="{!responsibleParty.Contact__c}" multiselect="false" size="1" disabled="{!contactReadOnlyMode && NOT(isAdmin)}">
                            <apex:selectOptions value="{!availableContacts}"/> 
                            <apex:actionSupport event="onchange" rerender="contactOut" oncomplete="bindEmailPhone(this);"/>
                        </apex:selectList>
                        <apex:outputField label="ID" value="{!responsibleParty.ICC_Contact_ID__c}"/>
                        <apex:inputField styleClass="email" value="{!responsibleParty.Email__c}" html-placeholder="[Default]"/>
                        <apex:inputField styleClass="phone" value="{!responsibleParty.Phone__c}" html-placeholder="[Default]"/>
                        <apex:commandButton value="Update Responsible Party" action="{!updateResponsibleParty}" rerender="out" disabled="{!(ISNULL(availableContacts) || availableContacts.size == 0 || contactReadOnlyMode)}"/>
                    </apex:pageBlockSection>
                    &nbsp;
                    <apex:pageBlockSection title="Active" id="pbs_Contacts" columns="1">
                        <apex:outputpanel id="dtContactsAndRoles_panel">
                            <apex:outputText rendered="{!activeContacts.size == 0}">There are no active customer contacts</apex:outputText>
                            <apex:dataTable id="dtContactsAndRoles" value="{!activeContacts}" var="id" border="1px" cellpadding="4px" rendered="{!activeContacts.size > 0}">
                                <apex:column >
                                    <apex:facet name="header">Name</apex:facet>
                                    <apex:outputLink value="../{!id}">{!contacts[id].Name}</apex:outputLink>
                                </apex:column>
                                <apex:column >
                                    <apex:facet name="header">Phone</apex:facet>
                                    <apex:outputText value="{!contacts[id].Phone}"/>
                                </apex:column>
                                <apex:column >
                                    <apex:facet name="header">Email</apex:facet>
                                    <apex:outputText value="{!contacts[id].Email}"/>
                                </apex:column>
                                <apex:column styleClass="contactRoles">
                                    <apex:facet name="header">Roles</apex:facet>
                                    <apex:repeat value="{!customerContacts[id]}" var="mod">
                                        <apex:outputPanel rendered="{!LEN(mod) > 0}">
                                            <div class="contactRoleHeader">{!IF(LEN(customerContacts[id][mod][0].Email__c) > 0, ('Email: ' + customerContacts[id][mod][0].Email__c + ' '), '')}{!IF(LEN(customerContacts[id][mod][0].Phone__c) > 0, ('Phone: ' + customerContacts[id][mod][0].Phone__c), '')}</div>
                                        </apex:outputPanel>
                                        <apex:dataTable value="{!customerContacts[id][mod]}" var="role" border="1px" cellpadding="4px" styleClass="contactRole">
                                            <apex:column >
                                                <apex:facet name="header">Type</apex:facet>
                                                <apex:outputText value="{!role.Contact_Type__c}"/>
                                            </apex:column>
                                            <apex:column >
                                                <apex:facet name="header">ID</apex:facet>
                                                <apex:outputText value="{!role.ICC_Contact_ID__c}"/>
                                            </apex:column>
                                            <apex:column style="width: 1%;">
                                                <apex:facet name="header"><input id="cb{!id}" type="checkbox" value="false" onclick="selectAllToggled(this)"/></apex:facet>
                                                <input elemID="{!role.Id}" selectAllCheckboxID="cb{!id}" type="checkbox" value="false" class="tableCheckbox" onclick="checkboxToggled(this)"/>
                                            </apex:column>
                                        </apex:dataTable>
                                    </apex:repeat>
                                </apex:column>
                                <apex:facet name="footer">
                                    <apex:outputPanel >
                                        <apex:commandButton value="Remove Selected Assignments" onclick="doRemoveRoles(gatherSelection('dtContactsAndRoles')); return false;" disabled="{!contactReadOnlyMode}"/>
                                        <apex:commandButton value="Set Email & Phone For Selection" onclick="doUpdateRoles(gatherSelection('dtContactsAndRoles')); return false;" disabled="{!contactReadOnlyMode}"/>
                                    </apex:outputPanel>
                                </apex:facet>
                            </apex:dataTable>
                        </apex:outputpanel>
                    </apex:pageBlockSection>
                    <apex:pageBlockSection title="Update Customer Contacts" collapsible="false" columns="2" rendered="{!NOT(ISNULL(newCustomerContact)) && NOT(contactReadOnlyMode)}">
                        <apex:inputField styleClass="email" value="{!newCustomerContact.Email__c}" html-placeholder="[Default]"/>
                        <apex:inputField styleClass="phone" value="{!newCustomerContact.Phone__c}" html-placeholder="[Default]"/>
                        <apex:selectList label="Contact" value="{!selectedContact}" multiselect="false" size="1">
                            <apex:selectOptions value="{!availableContacts}"/>
                            <apex:actionSupport event="onchange" rerender="contactOut" oncomplete="bindEmailPhone(this);"/>
                        </apex:selectList>
                        <apex:selectList label="Contact Types" id="contactType" value="{!selectedContactTypes}" multiselect="true" size="5">
                            <apex:selectOptions value="{!availableContactTypes}"/>
                        </apex:selectList>
                        <apex:commandButton value="Add New Customer Contact" id="btnAddContact" onclick="doAddContact(); return false;" disabled="{!ISNULL(availableContacts) || availableContacts.size == 0}"/>
                    </apex:pageBlockSection>
                </apex:pageBlock>
                <apex:actionFunction name="doAddContact" action="{!createNewCustomerContact}" rerender="out, dtContactsAndRoles_panel"/>
                <apex:actionFunction name="doRemoveRoles" action="{!removeRoles}" rerender="out, dtContactsAndRoles_panel">
                    <apex:param name="roleIDs" value=""/>
                </apex:actionFunction>
                <apex:actionFunction name="doUpdateRoles" action="{!updateRoles}" rerender="out, dtContactsAndRoles_panel">
                    <apex:param name="roleIDs" value=""/>
                </apex:actionFunction>
            </apex:form>
            <apex:form id="frm_SubSettings">
                <apex:pageBlock id="pb_SubSettings">
                    <apex:pageBlockSection title="Details" id="pbs_SubSettings" columns="1">
                        <apex:outputpanel id="dtSubscriberSettings_panel">
                            <apex:outputText rendered="{!subscriberSettings.size == 0}">There are no active subscriber settings</apex:outputText>
                            <apex:dataTable id="dtSubscriberSettings" value="{!subscriberSettings}" var="settingId"
                                cellspacing="0" cellpadding="0" border="0" styleClass="list" headerClass="headerRow" rendered="{!subscriberSettings.size > 0}">
                                <apex:column style="width: 1%;" rendered="{!NOT(settingReadOnlyMode)}">
                                    <apex:facet name="header"><input id="cb{!settingId}" type="checkbox" value="false" onclick="selectAllToggled(this)"/></apex:facet>
                                    <input elemID="{!settingId}" selectAllCheckboxID="cb{!settingId}" type="checkbox" value="false" class="tableCheckbox" onclick="checkboxToggled(this)"/>
                                </apex:column>
                                <apex:column >
                                    <apex:facet name="header">Type</apex:facet>
                                    <apex:outputText value="{!customerSettings[settingId].Name}"/>
                                </apex:column>
                                <apex:column >
                                    <apex:facet name="header">Value</apex:facet>
                                    <apex:outputText value="{!customerSettings[settingId].Value__c}" rendered="{!settingReadOnlyMode}"/>
                                    <apex:inputField value="{!customerSettings[settingId].Value__c}" rendered="{!NOT(settingReadOnlyMode)}"/>
                                </apex:column>
                                <apex:column >
                                    <apex:facet name="header">Create Date</apex:facet>
                                    <apex:outputText value="{!customerSettings[settingId].CreatedDate}"/>
                                </apex:column>
                                <apex:facet name="footer">
                                    <apex:outputpanel >

                                        <apex:commandButton value="Delete" onclick="doDeleteSubscriberSettings(gatherSelection('dtSubscriberSettings')); return false;" rendered="{!NOT(settingReadOnlyMode)}"/>
                                        <apex:commandButton value="Update" onclick="doUpdateSubscriberSettings(gatherSelection('dtSubscriberSettings')); return false;" rendered="{!NOT(settingReadOnlyMode)}"/>
                                    </apex:outputpanel>
                                </apex:facet>
                            </apex:dataTable>
                        </apex:outputpanel>
                    </apex:pageBlockSection>
                    <apex:pageBlockSection title="New Subscriber Setting" collapsible="false" columns="2" rendered="{!NOT(ISNULL(newSubSetting)) && NOT(settingReadOnlyMode)}">
                        <apex:selectList id="sl_subSettingType" label="Type" value="{!selectedSubSetting}" multiselect="false" size="1">
                            <apex:selectOptions value="{!availableSubscriberSettings}"/> 
                        </apex:selectList>
                        <apex:inputField value="{!newSubSetting.Value__c}"/>
                        <apex:commandButton value="Add New Subscriber Setting" action="{!createNewSubscriberSetting}" rerender="out, dtSubscriberSettings_panel, sl_subSettingType"/>
                    </apex:pageBlockSection>
                    <apex:actionFunction name="doDeleteSubscriberSettings" action="{!deleteSubscriberSettings}" rerender="out, dtSubscriberSettings_panel, sl_subSettingType">
                        <apex:param name="settingIDs" value=""/>
                    </apex:actionFunction>
                    <apex:actionFunction name="doUpdateSubscriberSettings" action="{!updateSubscriberSettings}" rerender="out, dtSubscriberSettings_panel">
                        <apex:param name="settingIDs" value=""/>
                    </apex:actionFunction>
                </apex:pageBlock>
            </apex:form>
            <apex:form id="frm_SubTaxes">
                <apex:pageBlock id="pb_SubTaxes">
                    <apex:pageBlockSection title="Details" id="pbs_SubTaxes" columns="1" >
                        <apex:outputpanel id="dtSubTaxes_panel">
                            <apex:outputText rendered="{!taxInfos.size == 0}">There is no active tax information</apex:outputText>
                            <apex:dataTable id="dtSubTaxes" value="{!taxInfos}" var="taxInfoId"
                                cellspacing="0" cellpadding="0" border="0" styleClass="list" headerClass="headerRow" rendered="{!taxInfos.size > 0}">
                                <apex:column style="width: 1%;" rendered="{!NOT(settingReadOnlyMode)}">
                                    <apex:facet name="header"><input id="cb{!taxInfoId}" type="checkbox" value="false" onclick="selectAllToggled(this)"/></apex:facet>
                                    <input elemID="{!taxInfoId}" selectAllCheckboxID="cb{!taxInfoId}" type="checkbox" value="false" class="tableCheckbox" onclick="checkboxToggled(this)"/>
                                </apex:column>
                                <apex:column >
                                    <apex:facet name="header">Name</apex:facet>
                                    <apex:outputText value="{!customerSettings[taxInfoId].Name}"/>
                                </apex:column>
                                <apex:column >
                                    <apex:facet name="header">Type</apex:facet>
                                    <apex:outputText value="{!customerSettings[taxInfoId].Description__c}"/>
                                </apex:column>
                                <apex:column >
                                    <apex:facet name="header">Start Date</apex:facet>
                                    <apex:outputText value="{!customerSettings[taxInfoId].Start_Date__c}"/>
                                    <!--<apex:inputField id="tblSubTaxStartDate" value="{!customerSettings[taxInfoId].Start_Date__c}" rendered="{!NOT(settingReadOnlyMode)}"/>-->
                                </apex:column>
                                <apex:column >
                                    <apex:facet name="header">End Date</apex:facet>
                                    <apex:outputText value="{!customerSettings[taxInfoId].End_Date__c}"/>
                                    <!--<apex:inputField id="tblSubTaxEndDate" value="{!customerSettings[taxInfoId].End_Date__c}" rendered="{!NOT(settingReadOnlyMode)}"/>-->
                                </apex:column>
                                <apex:column >
                                    <apex:facet name="header">Exempt Form Provided</apex:facet>
                                    <apex:outputField value="{!customerSettings[taxInfoId].Exempt_Form_Provided__c}"/>
                                    <!--<apex:inputField value="{!customerSettings[taxInfoId].Exempt_Form_Provided__c}" rendered="{!NOT(settingReadOnlyMode)}"/>-->
                                </apex:column>
                                <apex:column >
                                    <apex:facet name="header">Create Date</apex:facet>
                                    <apex:outputText value="{!customerSettings[taxInfoId].CreatedDate}"/>
                                </apex:column>
                                <apex:facet name="footer">
                                    <apex:outputpanel >
                                        <apex:commandButton value="Update" onclick="doUpdateSubscriberTaxInformation(gatherSelection('dtSubTaxes'), false); return false;" rendered="{!NOT(settingReadOnlyMode) && canModifyTaxExempt }"/>
                                        <apex:commandButton value="Update And End Date" onclick="doUpdateSubscriberTaxInformation(gatherSelection('dtSubTaxes'), true); return false;" rendered="{!NOT(settingReadOnlyMode) && canModifyTaxExempt}"/>
                                        &nbsp;&nbsp;
                                        <apex:commandButton value="Copy" onclick="if(verifyCopyIDSelected()){ openParentChildDetailSelection(copyToTaxInfoSelected); } return false;" rendered="{!NOT(settingReadOnlyMode) && canModifyTaxExempt}"/>
                                        <div style="display:inline; margin-left:10px;" title="Enter text to filter the 'Type' column."><label for="dtSubTaxesTypeFilter">Type Filter: </label><input colNum="2" type="text" id="dtSubTaxesTypeFilter"></input></div><br />
                                    </apex:outputpanel>
                                </apex:facet>
                            </apex:dataTable>
                        </apex:outputpanel>
                    </apex:pageBlockSection>
                    <apex:pageBlockSection title="New Tax Information" collapsible="false" columns="2" rendered="{!NOT(ISNULL(newSubTax)) && NOT(settingReadOnlyMode) && canModifyTaxExempt}">
                        <apex:selectList label="Type" id="newTaxType" value="{!selectedSubTax}" multiselect="false" size="1">
                            <apex:selectOptions value="{!availableSubscriberTaxes}"/> 
                        </apex:selectList>
                        <!--<apex:inputField id="inpSubTaxStartDate" value="{!newSubTax.Start_Date__c}"/>-->
                        <!-- <apex:inputField value="{!newSubTax.End_Date__c}"/> -->
                        <apex:inputField id="cbSubTaxExemptForm" value="{!newSubTax.Exempt_Form_Provided__c}"/>
                        <input class="btn" type="button" value="Add New Tax Information" onclick="validateNewSubscriberTax(); return false;"/>
                    </apex:pageBlockSection>
                    <apex:pageBlockSection title="Account Settings" collapsible="false" columns="1" rendered="{!NOT(systemAccountParent) && NOT(settingReadOnlyMode) && NOT(ISNULL(account)) && canModifyTaxExempt}">
                        <apex:inputField id="cbDefaultNAAExempt" value="{!account.Default_NAA_Exempt__c}">
                            <apex:actionSupport event="onclick" rerender="out" oncomplete="setDefaultNAAExempt();"/>
                        </apex:inputField>
                    </apex:pageBlockSection>
                    <apex:actionFunction name="doUpdateSubscriberTaxInformation" action="{!updateSubscriberTaxInformation}" rerender="out, dtSubTaxes_panel, newTaxType">
                        <apex:param name="settingIDs" value=""/>
                        <apex:param name="endDate" value=""/>
                    </apex:actionFunction>
                    <apex:actionFunction name="doCreateNewSubscriberTax" action="{!createNewSubscriberTax}" rerender="out, dtSubTaxes_panel, newTaxType" oncomplete="closeModalWaitDialog()">
                    </apex:actionFunction>
                    <apex:actionFunction name="doSaveAccountAndCreateNewSubscriberTaxes" action="{!saveAccountAndCreateNewSubscriberTaxes}" rerender="out, dtSubTaxes_panel, newTaxType" oncomplete="closeModalWaitDialog()">
                        <apex:param name="refIDs" value=""/>
                        <apex:param name="cdIDs" value=""/>
                    </apex:actionFunction>
                    <!--<apex:actionFunction name="doFilterOtherCustomerDetails" reRender="out, dtParentChildDetails" action="{!updateOtherCustomerDetailList}">
                        <apex:param name="filter" value="" assignTo="{!otherCustomerDetailFilter}"/>
                    </apex:actionFunction>-->
                    <apex:actionFunction name="doCopyTaxExemptionsToParentChildren" rerender="out, dtSubTaxes_Panel" action="{!copyTaxExemptions}" oncomplete="clearAllSelected('dtSubTaxes'); closeModalWaitDialog();">
                        <apex:param name="copyTaxInfoIDs" value=""/>
                        <apex:param name="copyToIDs" value=""/>
                    </apex:actionFunction>
                </apex:pageBlock>
            </apex:form>
            <apex:form >
                <!-- TreeView -->
                <c:CustomerHierarchy />
                <apex:actionFunction name="doAsynchLoad" action="{!loadNodes}" oncomplete="nodesLoaded(); return false;" rerender="jsTreeViewPanel, out">
                    <apex:param name="divID" value="" assignTo="{!loadMore_divID}"/>
                    <apex:param name="path" value="" assignTo="{!loadMore_path}"/>
                    <apex:param name="parentNodeId" value="" assignTo="{!loadMore_parentNodeId}"/>
                    <apex:param name="currentlyLoaded" value="" assignTo="{!loadMore_currentlyLoaded}"/>
                </apex:actionFunction>
                <apex:outputPanel id="jsTreeViewPanel">
                    <script type="text/javascript">
                        function nodesLoaded(){
                            asynchLoadComplete({!IF(NOT(ISNULL(loadedNodes) || loadedNodes == ''), loadedNodes, "[]")});
                        }
                    </script>
                </apex:outputPanel>
                <script type="text/javascript">
                    jQuery(document).ready(function(){
                        var t = {!AllJSONTrees};
                        var a = {!ActionMappings};
                        var i = {!IconMappings};
                        registerMaps(a, i);
                        loadTree('hierarchy', true, t['hierarchy']);
                    });
                </script>
                <div id="hierarchy_block" style="display: none">
                    <h2 id="hierarchy_header">Integration Hierarchy</h2>
                    <div id="hierarchy" style="position:relative;"/> 
                </div>
            </apex:form>
        </div>
        <apex:form >
                <div id="addressSelectorModalParent">
                    <div id="addressSelectorModal">
                        <apex:pageBlock >
                            <script type="text/javascript">
                                jQuery(document).ready(function(){
                                    $('#addressSelectorModal').dialog({
                                        autoOpen: false,
                                        modal: true,
                                        minWidth: 1000,
                                        title: 'Select Address',
                                        position: "top",
                                        open: function(){ bindDialogBackToParent(jQuery(this), '#addressSelectorModalParent'); jQuery('#txtGoogleAddress').focus();  }
                                        
                                    });
                                });
                            </script>
                            <c:AddressSelector autoBindSearchBox="false" saveCallbackFunction="doSaveAddresses" validateCallbackFunction="validateSelectedAddress" validateMode="true"/>
                        </apex:pageBlock>
                    </div>
                </div>      
            </apex:form>
        <c:ApexDetailExtension formID="customButton_frm" onLoad="bindCustomerDetails();"/>
    </apex:detail>
    <script type="text/javascript">
        $(document).ready(function(){

            $('#parentChildDetailsHolder').dialog({
                autoOpen: false,
                modal: true,
                minWidth: 750,
                title: 'Select Other Customers',
                buttons: [{ text: 'Apply', click:applyTaxInfo },{ text: 'Cancel', click:closeParentChildDetailSelection }],
                open: function(){ bindDialogBackToParent(jQuery(this), '#parentChildDetailsParent'); },
                show: 'blind',
                hide: 'blind'
            });
            
            jQuery("[id$='cdSelector']").bind('recordSelected', parentChildDetailsSelected);
            
            //Make the tax dates click only
            //jQuery('input[id$=inpSubTaxStartDate], input[id$=tblSubTaxStartDate], input[id$=tblSubTaxEndDate]').attr('readonly', true).removeAttr('onfocus');
        });
    </script>
    <div id="parentChildDetailsParent">
        <div id="parentChildDetailsHolder" class="parentChildDetailDiv" style="width:50%">
            <c:RecordSelector sObjectType="Customer_Detail__c" multiSelectMode="true" id="cdSelector" fields="Id,ICC_Subscriber_ID__c,Parent_Customer__c" whereClause="Parent_Account__c = '{!customerDetail.Parent_Account__c}' and Id != '{!customerDetail.Id}'"/>
        </div>
    </div>
    
        
    <style type="text/css">
        span.headerElement{
            padding-left: 50px;
        }
        
        div.customSection div.pbCustomSubheader{
            color: white;
            margin: 5px;
        }
        
        div.savedSettings{
            border-style: solid;
            border-width: 1px;
            border-color: gray;
            margin-bottom: 10px;
        }
        
        .customHidden{
            display: none;
        }
        
        td.contactRoles{
            padding: 2px;
        }
        
        div.contactRoleHeader{
            font-weight: bold;
            background-color: gray;
            color: white;
            padding: 3px;
            margin-top: 8px;
            border-style: solid;
            border-width: 1px;
            border-color: black;
        }
        
        table.contactRole{
            width: 100%;
        }
        
        img.fieldAlertImage{
            padding-left: 3px;
            padding-right: 3px;
        }
        div.savedSettings > div.pbSubsection{
            max-height:400px;
            overflow-y:auto;
        }
        
        div.parentChildDetailDiv{
            max-height:400px;
            overflow-y:auto;
        }
        
        div.parentChildDetailDiv table{
            width:100%
        }
        
        {!IF(NOT(canDeleteOrClone), 'input.btn[name=\"del\"] { display: none; } input.btn[name=\"clone\"] { display: none; }', '')}
    </style>
    <script type="text/javascript">
        function bindCustomerDetails(){
            moveCustomButtonInline(jQuery('input[id$=customSave]'), true);
            
            //jQuery(sfdcPage).bind('afterDblClick afterRevert', function(){checkSaveVisible(true);});
            
            var pbBody = jQuery('div.bDetailBlock').children('div.pbBody');
            if(pbBody.length > 0){
                createPageSection('additionalDetails', 'Additional Details', pbBody, null);
                
                {!IF(NOT(parentIsBillable), "bindPageSection('billCycle', 'Bill Cycle');", "")}
                
                createPageSection('addresses', 'Addresses', pbBody, null);
                createPageSection('contacts', 'Contacts', pbBody, null);
                createPageSection('subscriberSettings', 'Subscriber Settings', pbBody, null);
                createPageSection('taxInformation', 'Tax Information', pbBody, null);
                
                //createListHoverLink('additionalDetailsHeader', 'Additional Details', pbBody);
                {!IF(NOT(parentIsBillable), "createListHoverLink('billCycleHeader', 'Bill Cycle', pbBody);", "")}
                createListHoverLink('addressesHeader', 'Addresses', pbBody);
                createListHoverLink('contactsHeader', 'Contacts', pbBody);
                createListHoverLink('subscriberSettingsHeader', 'Subscriber Settings', pbBody);
                createListHoverLink('taxInformationHeader', 'Tax Information', pbBody);
                
                jQuery('div[id$=pb_Addresses], div[id$=pb_Contacts], div[id$=pb_SubSettings], div[id$=pb_SubTaxes]').find('div.pbSubheader').removeClass('pbSubheader').addClass('pbCustomSubheader');
                jQuery('div[id$=pbs_Contacts], div[id$=pbs_SubSettings], div[id$=pbs_SubTaxes]').addClass('savedSettings');
                
                appendElement(jQuery('form[id$=frm_AdditionalDetails]'), jQuery('div[id=additionalDetails]'));
                appendElement(jQuery('form[id$=frm_Addresses]'), jQuery('div[id=addresses]'));
                appendElement(jQuery('form[id$=frm_Contacts]'), jQuery('div[id=contacts]'));
                appendElement(jQuery('form[id$=frm_SubSettings]'), jQuery('div[id=subscriberSettings]'));
                appendElement(jQuery('form[id$=frm_SubTaxes]'), jQuery('div[id=taxInformation]'));
                
                //Collapse persisted settings by default
                jQuery('div[id$=billCycleHeader], div[id$=pbs_Contacts], div[id$=pbs_SubSettings], div[id$=pbs_SubTaxes]').each(function(){
                    collapsePBS(jQuery(this));
                });
            }
        }
        //some helper vars.
        var tmpMSAGStreet = '';
        var tmpMSAGCity = '';
        var tmpMSAGState = '';
        function validateSelectedAddress(response){
            if(response.verified){
                enableUpdateWithValidatedAddress(true);
                openModalWaitDialog('Validating with external systems...');
                tmpMSAGStreet = response.street;
                tmpMSAGCity = response.city;
                tmpMSAGState = response.state;
                //MNK alert('CustomerDetailExtensionController - City: ' + response.city + ' Country: ' + response.country);
                doValidateAddress(response.streetNum
                                ,response.street
                                ,response.roomSuite
                                ,response.city
                                ,response.state
                                ,response.postalCode
                                ,response.latitude
                                ,response.longitude
                                ,response.manualCreate
                                ,response.country);
        
                
            }
            else{
                enableUpdateWithValidatedAddress(false);
            }
        }
        
        function doSaveAddresses(locationID){
            doUpdateAddressesFromValidatedAddress(gatherSelection('dtAddresses'), locationID);
        }
        
        function enableUpdateWithValidatedAddress(enabled){
            if(enabled)
                jQuery('[id$=btnUpdateWithValidatedAddress]').prop('disabled', false).removeClass('btnDisabled').addClass('btn');
            else{
                jQuery('[id$=btnUpdateWithValidatedAddress]').prop('disabled', true).addClass('btnDisabled');
            }
        }
        
        function selectAllToggled(x){
            var checkboxes = $('.tableCheckbox',$(x).closest('table'));
            for(var idx = 0; checkboxes.length > idx; ++idx){
                var checkbox = $(checkboxes[idx]);
                var rowVisible = $(checkbox).closest('tr').is(':visible');
                var cbVal = $(x).attr('checked');
                var checked = cbVal != null && cbVal != undefined && cbVal.toLowerCase() == 'checked';
                if(rowVisible)
                {
                    if(checked)
                        checkbox.attr('checked', 'checked');
                    else
                        checkbox.removeAttr('checked'); 
                    checkboxToggled(checkbox);
                }
            }
        }
        
        function checkboxToggled(x){
            var checked = $(x).attr('checked');
            if(checked == null || checked == undefined){
                var selectAllCheckboxID = '#' + $(x).attr('selectAllCheckboxID');
                $(selectAllCheckboxID).removeAttr('checked');
            }
        }
        
        function clearAllSelected(tID){
            var t = jQuery('table[id$='+ tID + ']');
            t.find('.tableCheckbox').each(function(idx, ele){
                if($(ele).is(':checked'))
                    $(ele).removeAttr('checked');
            });
            var pcb = $('#cb', t);
            if(pcb != null && pcb != undefined && pcb.is(':checked'))
                pcb.removeAttr('checked');
                
        }
        
        function gatherSelection(tID){
            var t = jQuery('table[id$='+ tID + ']');
            var selectedIDs = "";
            if(t.length > 0){
                var comma = "";
                t.find('.tableCheckbox').each(function(idx, ele){
                    if($(ele).attr('checked')){
                        selectedIDs += comma + $(ele).attr('elemID');
                        comma = ",";
                    }
                });
            }
            return selectedIDs;
        }
        
        function bindPageSection(id, name){
            var pbBody = jQuery('div.bDetailBlock').children('div.pbBody');
            createPageSection(id, name, pbBody, jQuery('select[id$=sl_'+id+']').parent('form'));
            appendElement(jQuery('form[id$=frm_'+id+']'), jQuery('div[id='+id+']'));
        }
        
        function checkSaveVisible(setVal){
            var btn = jQuery('input[id$=customSave]');
            var visible = jQuery('[id$=persist_billCycle]').text() != jQuery('select[id$=sl_billCycle]').val();
            visible = (visible || (jQuery('[id$=persist_userIntoDispute]').text() != jQuery('input[type=hidden][id$=userIntoDispute_lkid]').val()));             
            jQuery('form[id$=frm_AdditionalDetails]').children('table').children('tbody').children('tr').children('td.dataCol').each(function(){
                var persist = jQuery(this).children('span[id^=persist_]');
                if(persist.length == 1){
                    var valId = persist.attr('id');
                    valId = valId.substring(8);
                    var sel = jQuery(this).children('select[id$=' + valId + ']');
                    
                    if(sel.length == 1)
                        visible = (visible || (persist.text() != sel.val()));
                    else{
                        var inp = jQuery(this).children('input[id$=' + valId + ']');
                        if(inp.length == 1)
                            visible = (visible || (persist.text() != inp.val()));
                    }
                }
            });
            
            if(setVal){
                if(visible){
                    btn.css('display', '').show();
                }
                else{
                    btn.hide();
                }
            }
            else
                return visible;
        }
        
        function updateAddressFormatByID(id){
            if(id == 'Customer_Main_Address__c'){
                OpenMSAGAddressSelection(updateAddressFormat, id, tmpMSAGCity, tmpMSAGState, tmpMSAGStreet);
            }
            else if (id == 'Tax_Main_Address__c'){
                doUpdateAddressFormat(id, 
                                        jQuery("[id$='txtHouseNumber']:enabled").val(), 
                                        jQuery("[id$='txtPreDirectional']:enabled").val(), 
                                        jQuery("[id$='txtStreet']:enabled").val(), 
                                        jQuery("[id$='txtStreetType']:enabled").val(),
                                        jQuery("[id$='txtPostDirectional']:enabled").val(), 
                                        jQuery("[id$='txtCity']:enabled").val());
            }   
        }
        
        function updateAddressFormat(id, houseNumber, preDirectional, street, postDirectional, city){
            doUpdateAddressFormat(id, houseNumber, preDirectional, street, null, postDirectional, city);
        }
        
        //filter a table based based on the given textbox
        function FilterTableByColumn(){
            var colNum = $(this).attr('colNum');
            var tbl = $(this).closest('table');
            var filterText = $(this).val();
            $('tr', $(tbl)).each(function(index, Element){
                try
                {
                    var tdToFilter = $('td', $(Element))[colNum];
                    if(tdToFilter != undefined && tdToFilter != null)
                    {
                        var tdText = $(tdToFilter).text().toLowerCase();
                        if(0 > tdText.indexOf(filterText))
                            $(Element).hide();
                        else
                            $(Element).show();
                    }
                }
                catch(exp){}
            });
        }
                        
        /*function filterOtherCustomerDetailList(){
            var txt = $('input[id$="otherCustomerDetailFilter"]');
            doFilterOtherCustomerDetails(txt.val());
        }*/
        
        function validateNewSubscriberTax() {
            var cb = $('input[id$="cbSubTaxExemptForm"]');
            //var sd = $('input[id$="inpSubTaxStartDate"]');
            if(!$(cb).is(':checked') /*|| sd.val() == ''*/) {
                window.alert('You must specify that the exemption form was provided.');
            }
            else {
                openModalWaitDialog("Adding new tax exemption...");
                doCreateNewSubscriberTax();
            }
        }
        
        jQuery(document).ready(function(){
            $('select[id$=userIntoDispute_mlktp]').hide();
            $(document).undelegate('#dtSubTaxesTypeFilter');
            $(document).delegate('#dtSubTaxesTypeFilter','keyup', FilterTableByColumn);
            $(document).undelegate('input[id$="cbSubTaxExemptForm"]');
            $(document).delegate('input[id$="cbSubTaxExemptForm"]', 'click', function() {
                $('input[value="Add New Tax Information"]').prop('disabled',!$(this).is(':checked')).toggleClass('btnDisabled');
            });
            $('input[value="Add New Tax Information"]').prop('disabled', true).addClass('btnDisabled');
            $(document).undelegate('select[id$="collectionCode"]', 'change', requireDisputedAmount);
            $(document).delegate('select[id$="collectionCode"]', 'change',requireDisputedAmount);
            
            
            $('#addressSelectorModal').dialog({
                autoOpen: false,
                modal: true,
                minWidth: 750,
                title: 'Select Address'
                
            });
        });
        
        function verifyCopyIDSelected(){
            var ids = gatherSelection('dtSubTaxes');
            if(ids.length == 0){
                alert('You must select at least one tax exemption to copy.');
                return false;
            }
            return true;
        }
        
        var parentChildDetailSelection = null;
        function openParentChildDetailSelection(f){
            parentChildDetailSelection = f;
            recordSelector_reset();
            $('#parentChildDetailsHolder').dialog('open');
        }
        
        function parentChildDetailsSelected(e){
            parentChildDetailSelection(e);
        }
        
        function closeParentChildDetailSelection(){
            $('#parentChildDetailsHolder').dialog('close');
        }
        
        function applyTaxInfo(){
            recordSelector_gatherSelection();
        }
        
        function copyToTaxInfoSelected(e){
            var copyToIDs = e.records;
            var idsToCopy = gatherSelection('dtSubTaxes');
            if(copyToIDs.length == 0){ 
                alert('You must select at least one customer to copy to.');
                return;
            }
            closeParentChildDetailSelection();
            openModalWaitDialog('Copying tax exemptions. <br /> Please wait...');
            doCopyTaxExemptionsToParentChildren(idsToCopy, copyToIDs.join());
        }
        
        function naaExemptTaxInfoSelected(e){
            var copyToIDs = e.records;
            copyToIDs.push('{!customerDetail.Id}');
            
            closeParentChildDetailSelection();
            openModalWaitDialog('Creating tax exemptions. <br /> Please wait...');
            doSaveAccountAndCreateNewSubscriberTaxes('38,96,103,104', copyToIDs.join());
        }
        
        function requireDisputedAmount(){
            var selectedVal = $('select[id$="collectionCode"]').children('option:selected').text();
            var disputedAmount = $('input[id$="disputedAmount"]');
            if((selectedVal.indexOf('AID') == 0 || selectedVal.indexOf('ORG') == 0 || selectedVal.indexOf('BIL') == 0) && disputedAmount.val() == 0){
                $('input[id$="disputedAmount"]').toggleClass('ui-state-highlight', 1000).toggleClass('ui-state-highlight', 1000).focus();
            }
        }
                
        function linkObject(){
            var linkID = prompt("Enter an account or service location ID", "");
            if(linkID != '')
                doLinkObject(linkID);
        }
        
        function bindDialogBackToParent(x, p){
            jQuery(p).append(x.parent());       //Bind back to where it got pulled from so inputFields still work
        }
            
        function openAddressDiaglog(){
            $('#addressSelectorModal').dialog('open');
        }   
            
        function closeAddressDiaglog(){
            $('#addressSelectorModal').dialog('close');
        }
        
        function setDefaultNAAExempt(){
            var cb = jQuery('input[id$="cbDefaultNAAExempt"]');
            if(cb.length == 0 || cb.prop("disabled") == true){
                return;
            }
            
            if(cb.is(':checked') && confirm('NAA tax exemptions will be applied immediately to this customer and any others you select')){
                openParentChildDetailSelection(naaExemptTaxInfoSelected);
            }
            else{
                openModalWaitDialog('Saving...');
                doSaveAccountAndCreateNewSubscriberTaxes([], []);       //Don't save any new taxes
            }
        }
        
        function bindEmailPhone(elem){
            var contactID = jQuery(elem).children('option').filter(':selected').val();
            
            var emails = contactID != '' ? contactEmails[contactID] : [];
            var pNums = contactID != '' ? contactPhoneNumbers[contactID] : [];
            
            var emailField = jQuery(elem).closest('table').find('.email');
            var phoneField = jQuery(elem).closest('table').find('.phone');
            
            emailField.autocomplete({ source: emails });
            emailField.attr('placeholder', emails.length > 0 ? emails[0] : (contactID != '' ? '' : '[Default]'));
            
            phoneField.autocomplete({ source: pNums });
            phoneField.attr('placeholder', pNums.length > 0 ? pNums[0] : (contactID != '' ? '' : '[Default]'));
        }
    </script>
</apex:page>