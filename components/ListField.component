<apex:component >
	<script type="text/javascript" src="/soap/ajax/31.0/connection.js"/>
	<apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" />
	
	<apex:attribute name="sObject" description="The type of object" type="String" required="true"/>
   	<apex:attribute name="fieldName" description="The name of the text area list field" type="String" required="true"/>
   	<apex:attribute name="columnCount" description="The number of tabs to look for on each line" type="String" required="false" default="1"/>
	
	<script type="text/javascript">
		function get_{!sObject}_with_{!fieldName}(sfid){
			sforce.connection.sessionId = '{!$Api.Session_ID}';
			var r = sforce.connection.query("SELECT Id, {!fieldName} FROM {!sObject} WHERE Id = '" + sfid + "' limit 1");
			return r.getArray('records')[0];
		}
		
		function get_{!fieldName}(sfid){
			var result = [];
			
			var r = get_{!sObject}_with_{!fieldName}(sfid);
			var txt = r.{!fieldName};
			var lines = txt == null ? [] : txt.split('\n');
			
			for(var i=0; lines.length>i; i++){
				var tabs = [];
				var sp = lines[i].split('\t');
				
				//Add values from field
				var k = 0;
				for(; {!columnCount}>k; k++){
					if(sp.length > k){
						tabs.push(sp[k]);
					}
					else{
						//If there are not enough breaks to fit the columns, add blanks
						tabs.push('');
					}
				}
				
				for(; sp.length>k; k++){
					//If there are extra breaks, add to last column
					tabs[{!columnCount}-1] += '\t' + sp[k];
				}
				
				result.push(tabs);
			}
			
			return result;
		}
		
		function getKeyValueMarkup_{!fieldName}(sfid, readOnlyValues){
			if({!columnCount} != 2){
				alert('Key value markup for a list field is not available for data outside of a 2 column format.');
			}
			
			var val = get_{!fieldName}(sfid);
			
			var pb = jQuery('<div class="pbSubsection"></div>');
			
			var tbl = jQuery('<table cellspacing="0" cellpadding="0" border="0" class="detailList"></table>');
			
			for(var i=0; val.length>i; i++){
				addRowVals(tbl, val[i][0], val[i][1], false, readOnlyValues.indexOf(val[i][1]) != -1);
			}
			
			addRowVals(tbl, '[Add New]', '', true);
			
			pb.append(tbl);
			return pb;
		}
		
		function addRowVals(tbl, lbl1, val1, isNew, readOnly){
			var row = tbl.find('tr').last();
			var tds = row.find('td');
			
			var idx = 0;
			if(row.length == 0 || jQuery(tds[idx]).text() != ''){
				//LHS cells taken, check RHS
				idx = 2;
				
				if(row.length == 0 || jQuery(tds[idx]).text() != ''){
					//RHS cells taken, add row and set to LHS
					idx = 0;
					tbl.append(getNewRow());
					row = tbl.find('tr').last();
					tds = row.find('td');
				}
			}
			
			var c1 = jQuery(tds[idx]);
			var c2 = jQuery(tds[idx+1]);
			
			c1.text(lbl1);
			c2.text(val1);
			
			c1.attr('onmouseover', 'listFieldOnMouseOver(this);');
			c1.attr('onmouseout', 'listFieldOnMouseOut(this);');
			c1.attr('ondblclick', 'listFieldOnDoubleClick(this);');
			c2.attr('onmouseover', 'listFieldOnMouseOver(this);');
			c2.attr('onmouseout', 'listFieldOnMouseOut(this);');
			c2.attr('ondblclick', 'listFieldOnDoubleClick(this);');
			
			if(isNew){
				c1.addClass('newVal');
				c2.addClass('newVal');
			}
			
			if(readOnly){
				c2.removeClass('inlineEditWrite');
				c2.addClass('inlineEditLock');
				c2.attr('ondblclick', '');
			}
		}
		
		function getNewRow(){
			return jQuery('<tr>'
						+ '<td class="inlineEditWrite labelCol"></td>'
						+ '<td class="inlineEditWrite dataCol col02"></td>'
						+ '<td class="inlineEditWrite labelCol"></td>'
						+ '<td class="inlineEditWrite dataCol col02"></td>'
						+ '</tr>');
		}
		
		function gatherValues_{!fieldName}(elem){
			var tds = jQuery(elem).find('td');
			
			var vals = [];
			for(var i=0; tds.length>i; i++){
				if(jQuery(tds[i]).text() != '' && jQuery(tds[i+1]).text() != ''){
					vals.push([jQuery(tds[i]).text().replace('\t', '').replace('\n', ''), jQuery(tds[++i]).text().replace('\t', '').replace('\n', '')]);
				}
				else{
					i++;
				}
			}
			
			return vals;
		}
		
		function gatherAndSave_{!fieldName}(elem, sfid){
			saveValues_{!fieldName}(gatherValues_{!fieldName}(elem), sfid);
		}
						
		function saveValues_{!fieldName}(vals, sfid){
			var txt = '';
			for(var i=0; vals.length>i; i++){
				if(txt.length > 0){
					txt += '\n';
				}
				txt += vals[i][0] + '\t' + vals[i][1];
			}
			save_{!fieldName}(txt, sfid);
		}
		
		function save_{!fieldName}(txt, sfid){
			var r = get_{!sObject}_with_{!fieldName}(sfid);
			r.{!fieldName} = txt == '' ? null : txt;
			
			var result = sforce.connection.update([r]);
			
			if (result[0].success=='false') {
				alert(result[0].errors.message);
			}
		}
		
		function listFieldOnMouseOver(elem){
			var e = jQuery(elem);
			if(e.hasClass('inlineEditWrite')){
				e.removeClass('inlineEditWrite');
				e.addClass('inlineEditWriteOn');
			}
			else if(e.hasClass('inlineEditLock')){
				e.removeClass('inlineEditLock');
				e.addClass('inlineEditLockOn');
			}
		}
		
		function listFieldOnMouseOut(elem){
			var e = jQuery(elem);
			if(e.hasClass('inlineEditWriteOn')){
				e.removeClass('inlineEditWriteOn');
				e.addClass('inlineEditWrite');
			}
			else if(e.hasClass('inlineEditLockOn')){
				e.removeClass('inlineEditLockOn');
				e.addClass('inlineEditLock');
			}
		}
		
		function listFieldOnDoubleClick(elem){
			var e = jQuery(elem);
			if(e.find('input').length == 0){
				
				var isNew = e.hasClass('newVal');
				var isLabel = e.hasClass('labelCol');
				
				var elems = [ e, (isLabel ? e.next() : e.prev()) ];
				for(var i=0; elems.length>i; i++){
					e = elems[i];
					
					var txt = e.text();
					if(isNew){
						if(txt == '[Add New]'){
							txt = '';
						}
					}
					
					var inp = jQuery('<input type="text" onblur="listFieldEditOnBlur(this);" value="' + txt + '" placeholder="' + (e.hasClass('labelCol') ? 'Enter a label' : 'Enter a value') + '"/>');
					inp.keyup(function(e){
					    if(e.keyCode == 13){
					        listFieldEditOnBlur(this);
					    }
					});
					
					e.text('');
					e.append(inp);
				}
				
				jQuery(elems[(isNew && !isLabel) ? 1 : 0]).find('input').select();
			}
		}
		
		var skipBlur = false;
		function listFieldEditOnBlur(elem){
			if(skipBlur){
				return;
			}
			
			//Delay the check so we can get the next focused element
			setTimeout(function() {
				doListFieldEditOnBlur(elem);
		    }, 1);
		}
		
		function doListFieldEditOnBlur(elem){
			var e = jQuery(elem);
			var p = e.parent();
			
			var isLabel = p.hasClass('labelCol');
			
			var elems = [ e, (isLabel ? p.next().find('input') : p.prev().find('input')) ];
			
			//If the next element being focused on is the paired element, don't react to blur
			if(jQuery(document.activeElement)[0] == elems[1][0]){
				return;
			}
			
			var lbl = isLabel ? e : elems[1];
			var v = !isLabel ? e : elems[1];
			
			var isNew = p.hasClass('newVal');
			if(lbl.val() == ''){
				if(!isNew || v.val() != ''){
					skipBlur = true;
					alert('A label must be provided.');
					skipBlur = false;
					lbl.focus();
					return;
				}
			}
			
			for(var i=0; elems.length>i; i++){
				e = elems[i];
				p = e.parent();
				isLabel = p.hasClass('labelCol');
				
				var valChanged = true;
				var txt = e.val();
				if(isLabel && txt == ''){
					valChanged = false;
					txt = '[Add New]';
				}
				
				e.remove();
				p.text(txt);
				
				if(valChanged){
					if(isLabel){
						p.css('font-style', 'italic');
					}
					else{
						p.addClass('inlineEditModified');
					}
					
					if(isLabel && p.hasClass('newVal')){
						p.parent().find('.newVal').removeClass('newVal');
						addRowVals(p.closest('table'), '[Add New]', '', true);
					}
					
					p.closest('table').trigger('change');
				}
			}
		}
	</script>
</apex:component>