<apex:component >
	<apex:includeScript value="{!URLFOR($Resource.jquery_ui_1_8_16_custom, 'js/jquery-1.6.2.min.js')}" />
    <apex:includeScript value="{!URLFOR($Resource.jquery_ui_1_8_16_custom, 'js/jquery-ui-1.8.16.custom.min.js')}" />
    
    <apex:includeScript value="{!URLFOR($Resource.Dynatree, 'src/jquery.dynatree.js' )}" />
    <apex:stylesheet value="{!URLFOR($Resource.Dynatree, 'src/skin/ui.dynatree.css')}" />
    
    <apex:includeScript value="{!URLFOR($Resource.Dynatree, 'doc/contextmenu/jquery.contextMenu-custom.js' )}" />
    <apex:stylesheet value="{!URLFOR($Resource.Dynatree, 'doc/contextmenu/jquery.contextMenu.css')}" />
    
	<style type="text/css">
		span.tooltip {
		    display:none;
		    position:absolute;
		    z-index:1001;
		}
		
		span.tooltipHover {
		    display:block;
		    border-radius:5px;
		    color:black;
		    background-color:white;
		    box-shadow:1px 1px 3px gray;
		    padding:5px;
		    z-index:1001;
		}
		
		span.tooltipHover span.tooltipKey {
			float: left;
			padding-right: 10px;
			font-weight: bold;
		}
		
		span.tooltipHover span.tooltipVal {
			float: right;
			font-weight: normal;
		}
		
		.contextMenu{
			width: auto;
		    background-color:white;
		    box-shadow:1px 1px 3px gray;
		    z-index:1000;
		}
		
		.contextMenu A{
			height: 1%;
		}
		
		.ui-dynatree-disabled ul.dynatree-container
		{
	        opacity: 1.0;
	        background-color: #E3E3E3;
        }
	</style>
	<script type="text/javascript">
		var loaded = {};
		var actionMap = {};
		var iconMap = {};
		var ctxMenuDef = {};
		
		function registerMaps(tvActionMap, tvIconMap){
			actionMap = tvActionMap;
			iconMap = tvIconMap;
		}
		
		function loadTree(divID, inSidebar, treeConfig){
			if(!loaded[divID]){
				loaded[divID] = true;
				if(treeConfig == undefined || treeConfig == null) return;
				
				ctxMenuDef[divID] = {};
				
				if(treeConfig.asynchMode != 0)
					treeConfig.children = [];	//Should be empty but we will get them asynchronously
				else if(treeConfig.nodes.length == 0)
					return;
				
			    var tree = jQuery("#" + divID + "").dynatree({
				        persist: false
				        ,generateIds: true
				        ,classNames: {
				            checkbox: "dynatree-checkbox",
				            expanded: "dynatree-expanded"
				        }
						,selectMode: 1
						,onExpand: onExpand
						,children: treeConfig.nodes
						,clickFolderMode: 0
						,onClick: onClick
						,onDblClick: onDblClick
						,onCreate: function(node, span){ updateNode(node, span) }
						,onRender: function(node, span){ nodeRendered(node, span) }
						,inSidebar: inSidebar
					});
				
				var tDivBlock = jQuery('div[id=' + divID + '_block]');
				if(tDivBlock.length != 0){
					if(inSidebar){	//inSidebar check
						var divSidebar = jQuery('div[id=sidebarDiv]');
						if(divSidebar.length != 0 && tDivBlock.children('div[id=' + divID + '_headerDiv]').length == 0){
							var tDivHeader = tDivBlock.children('h2[id=' + divID + '_header]');
							if(tDivHeader.length != 0){
								tDivHeader.detach();
								tDivBlock.prepend('<div id="' + divID + '_headerDiv" class="sidebarModuleHeader"/>');
								tDivHeader.prependTo('div[id=' + divID + '_headerDiv]');
								
								tDivHeader.click(function() { toggleSidebarDisplay(divID); });
								tDivHeader.css("cursor", "pointer");
							}
							
							tDivBlock.prependTo(divSidebar);
							tDivBlock.css("padding-bottom", "10px");
						}
					}
					tDivBlock.show();
				}
				
				if(treeConfig.asynchMode == 1){
					asynchLoadAll(divID);
				}
				else if(treeConfig.asynchMode == 2){
					jQuery('div[id=' + divID + ']').children('.dynatree-container').append('<h2 id="' + divID + '_loading"><a href="#">Click to load...</a></h2>');
					var b = jQuery('h2[id=' + divID + '_loading]').children('a');
					b.click(function(){
						var b = jQuery(this);
						b.hide();
						var divID = b.parent().attr('id').substring(0, b.parent().attr('id').length - 8);
						asynchLoadAll(divID);
					});
				}
			}
		}
		
		function updateNode(node, span){
			if(!node.data.loaded){
				node.data.loaded = true;
				
				if(node.data.isLoadMore == true){
					var dNode = jQuery.ui.dynatree.getNode(node);
					dNode.data.icon = '/img/loading32.gif';
					dNode.data.title = 'Loading more...';
				}
				else{
					if(node.data.tt != undefined){
						var tt = node.data.tt;
						var newDef = [];
						
						var split = tt.split('#NEWLINE#');
						for(var i=0; split.length>i; i++){
							var lineSplit = split[i].split('#TAB#');
							if(lineSplit.length == 2)
								newDef.push({"key": lineSplit[0], "val": lineSplit[1]});
						}
						node.data.tooltipDef = newDef;
					}
					
					if(node.data.errors != undefined){
						var err = node.data.errors;
						var newDef = [];
						
						var split = err.split('#NEWLINE#');
						for(var i=0; split.length>i; i++){
							newDef.push(split[i]);
						}
						node.data.errors = newDef;
					}
				}
				
				updateDNode(node, span);
				
				if(node.data.isLoadMore == true)
					replaceNode(node);
			}
		}
		
		var nodeToReplace = null;
		function replaceNode(node){
			nodeToReplace = node;
			
			var currentlyLoaded = '';
			
			var dNode = jQuery.ui.dynatree.getNode(node);
			var divID = dNode.tree.divTree.id;
			
			var parentDNode = jQuery.ui.dynatree.getNode(dNode.parent);
			for(var i=0; parentDNode.childList.length>i; i++){
				var parentChildNode = parentDNode.childList[i];
				if(parentChildNode != node){
					if(currentlyLoaded.length > 0)
						currentlyLoaded += ',';
					currentlyLoaded += (parentChildNode.data.sfid != null ? parentChildNode.data.sfid : parentChildNode.data.title).replace(',', '#COMMA#');
				}
			}
			var path = '';
			var currentDNode = parentDNode;
			var root = $("#" + divID + "").dynatree("getRoot");
			while(currentDNode != null && currentDNode != root){
				if(path.length > 0)
					path = ':' + path;
				
				var parentId = currentDNode.data.sfid != undefined ? currentDNode.data.sfid : currentDNode.data.title;
				path = ((currentDNode.data.isGroup) ? '{' + parentId + '}' : parentId) + path;
				
				currentDNode = jQuery.ui.dynatree.getNode(currentDNode.parent);
			}
			
			dNode.tree.disable();
			doAsynchLoad(divID, path, parentDNode.data.key, currentlyLoaded);
		}
		
		var asynchLoad_divID;
		function asynchLoadAll(divID){
			jQuery('div[id=' + divID + ']').children('.dynatree-container').append('<h2 id="' + divID + '_loading"><img src="../img/loading32.gif"/> Loading...</h2>');
			asynchLoad_divID = divID;
			doAsynchLoad(divID, null, null, null, null);
		}
		
		function asynchLoadComplete(nodes){
			var addTo;
			var beforeNode;
			if(nodeToReplace != null){
				var dNode = jQuery.ui.dynatree.getNode(nodeToReplace);
				nodeToReplace = null;
				addTo = dNode.parent;
				dNode.tree.enable();
				beforeNode = dNode.getNextSibling();
				addTo.removeChild(dNode);
			}
			else{
				addTo = $("#" + asynchLoad_divID + "").dynatree("getRoot");
				jQuery('div[id=' + asynchLoad_divID + ']').children('.dynatree-container').find('h2[id=' + asynchLoad_divID + '_loading]').remove();
			}
			for(var i=0; nodes.length>i; i++){
				addTo.addChild(nodes[i], beforeNode);
			}
		}
		
		function updateDNode(node, span){
			var dNode = jQuery.ui.dynatree.getNode(node);
			
			var divID = dNode.tree.divTree.id;
			
			var ctxMenuName = 'ctxMenu_' + node.data.key;
			var ctxMenu = jQuery('<ul id="' + ctxMenuName + '" class="contextMenu" style="white-space: nowrap; diplay: none"><li class="open"><a href="#open">Open</a></li><li class="openInNewTab"><a href="#openInNewTab">Open in a new tab</a></li></ul>');
			var actionList = 'open-openInNewTab';
			
			var ico = node.data.ico;
			if(node.data.sfid != undefined && node.data.sfid != null){
				node.data.href = '../' + node.data.sfid;
				node.data.isFolder = true;
				
				if(ico == undefined || ico == null)
					ico = substringID(node.data.sfid);
			}
			else
				node.data.noLink = true;
			
			if(ico != undefined && ico != null){
				var icons = iconMap[divID];
				for(var i=0; icons.length>i; i++){
					if(icons[i].key == ico && icons[i].value != undefined && icons[i].value != null){
						node.data.icon = icons[i].value;
						break;
					}
				}
			}
			
			if(node.data.act != undefined){
				var actions = actionMap[divID];
				
				var actionIDs = node.data.act.split('|');
				for(var i=0; actionIDs.length>i; i++){
					var act = actionIDs[i];
					var actionText = null;
					for(var k=0; actions.length>k; k++){
						if(actions[k].key == act && actions[k].value != undefined && actions[k].value != null){
							actionText = actions[k].value;
							break;
						}
					}
					
					if(actionText != null){
						actionList += (i == 0 ? '|' : '-') + act;
						ctxMenu.append('<li class="' + act + (i == 0 ? ' separator' : '') + '"><a href="#' + act + '">' + actionText + '</a></li>');
					}
				}
			}
			
			var existing = ctxMenuDef[divID][actionList];
			if(existing == undefined){
				var divMenus = jQuery('div[id=treeViewContextMenus]');
				if(divMenus.length == 0){
					jQuery(document.body).append('<div id="treeViewContextMenus"></div>');
					divMenus = jQuery('div[id=treeViewContextMenus]');
				}
				divMenus.append(ctxMenu[0].outerHTML);
				
				ctxMenuDef[divID][actionList] = ctxMenu.attr('id');
			}
			else
				ctxMenuName = existing;
			
			node.data.ctxMenu = ctxMenuName;
			
			if(node.data.hidden != undefined && node.data.hidden.styleClass != undefined)
				node.data.addClass = node.data.hidden.styleClass;
			
			jQuery(span).contextMenu({menu: ctxMenuName}, contextMenuClicked);
			
			dNode.render();
		}
		
		function nodeRendered(node, span){
			if(node.data.tt != undefined){
				var a = jQuery(span).children('a');
				if(a.length > 0 && a.children('span').length == 0){
					a.addClass("treeViewTooltip");
					
					var formattedTooltip = node.data.formattedTooltip;
					if(formattedTooltip == undefined){
						var tt = "";
						for(var i=0; node.data.tooltipDef.length>i; i++)
							tt = tt + "<span class='tooltipKey'>" + node.data.tooltipDef[i]["key"] + "</span>" + "<span class='tooltipVal'>" + node.data.tooltipDef[i]["val"] + "</span><br/>";
						formattedTooltip = node.data.formattedTooltip = tt;
					}
					var att = jQuery('#tt'+node.data.key);
					var addToBody = false;
					if(1 > att.length) 
					{
						att = jQuery("<span id='tt"+node.data.key+"' class='tooltip' style='position:absolute;'>" + formattedTooltip + "</span>");
						addToBody = true;
					}
					//a.html(a.html() + "<span class='tooltip'>" + formattedTooltip + "</span>");
					a.attr("ttid", "tt"+node.data.key);
					a.mousemove(function(e) {
			            var ttid = "#" + a.attr("ttid");
			            jQuery(ttid).removeClass('tooltip').addClass('tooltipHover').css('left', e.pageX + 10 - $(document).scrollLeft()).css('top', e.pageY + 10).css('display', 'block');
			        });
	
			        a.mouseout(function() { 
			            var ttid = "#" + a.attr("ttid");
			            jQuery(ttid).removeClass('tooltipHover').addClass('tooltip').css('display', 'none');
			        });
			        if(addToBody)
			        	att.appendTo("body");
				}
			}
			if(node.data.errors != undefined){
				var img = jQuery(span).children('img.alertImage');
				if(img.length == 0){
					var formattedErrors = node.data.formattedErrors;
					if(formattedErrors == undefined){
						var err = "";
						for(var i=0; node.data.errors.length>i; i++)
							err = err + node.data.errors[i] + "\n";
						formattedErrors = node.data.formattedErrors = err;
					}
					jQuery(span).append(jQuery('<img class="alertImage" src="/img/msg_icons/error16.png" title="' + formattedErrors + '"/>'));
				}
			}
		}
		
		function onExpand(flag, node){
			if(flag){
				for(i=0; node.childList.length>i; i++){
					updateNode(node.childList[i]);
				}
			}
			
			//Re-fit
			var treeDiv = jQuery(node.tree.divTree);
			if(treeDiv.hasClass('hovering')){
				showSidebarDisplay(treeDiv.attr('id'));
			}
		}
		
		function onClick(node, event){
			return !node.data.isLoadMore;
		}
		
		function onDblClick(node, event){
			if(node.data.href != undefined){
				window.open(node.data.href);
				return false;
			}
			return true;
		}
		
		function contextMenuClicked(action, el, pos){
			var node = jQuery.ui.dynatree.getNode(el);
			switch( action ) {
				case 'open':
					window.open(node.data.href, '_self', false);
					break;
				case 'openInNewTab':
					window.open(node.data.href);
					break;
				default:{
					if (typeof contextMenuClicked_custom == 'function')
					    contextMenuClicked_custom(action, node);
					else
				  		alert('No function defined for ' + action + ' when clicked from ' + node);
				}
			}
		}
		
		function toggleSidebarDisplay(divID){
			var tDiv = jQuery('div[id=' + divID + ']');
			var tDivBlock = jQuery('div[id=' + divID + '_block]');
			if(tDiv.hasClass('hovering')){
				tDiv.removeClass('hovering');
				
				//Go back to adjusting with content size
				tDivBlock.css("overflow-y", "hidden");
				tDivBlock.css("height", "");
				tDiv.css("overflow-y", "hidden");
				tDiv.css("width", "auto");
			}
			else
				showSidebarDisplay(divID);
		}
				
		function showSidebarDisplay(divID){
			var tDiv = jQuery('div[id=' + divID + ']');
			var tDivBlock = jQuery('div[id=' + divID + '_block]');
			
			tDiv.addClass('hovering');
			var container = tDivBlock.find('.dynatree-container');
			var blockWidth = container[0].scrollWidth+2;
			tDivBlock.css("overflow-y", "visible");
			tDiv.css("overflow-y", "visible");
			tDiv.css("width", blockWidth);
			tDiv.css("z-Index", 999);
			var blockHeight = tDivBlock.height();
		}
		
		function substringID(id){
			return id.substring(0, 3);
		}
	</script>
</apex:component>